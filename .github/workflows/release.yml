name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v0.1.0)'
        required: true
        default: 'v0.1.0'

permissions:
  contents: write

env:
  GO_VERSION: '1.23'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ steps.get_version.outputs.tag }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "tag=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Generate changelog
      id: changelog
      run: |
        VERSION=${{ steps.get_version.outputs.tag }}
        echo "## NodelistDB ${VERSION}" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "### Features" >> RELEASE_NOTES.md
        echo "- FidoNet nodelist parsing and storage system" >> RELEASE_NOTES.md
        echo "- DuckDB-based high-performance storage engine" >> RELEASE_NOTES.md
        echo "- REST API for node search and statistics" >> RELEASE_NOTES.md
        echo "- Web interface for browsing nodelist data" >> RELEASE_NOTES.md
        echo "- Command-line tools for parsing and serving" >> RELEASE_NOTES.md
        echo "- Multi-platform support (Linux, Windows, macOS, FreeBSD)" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "### Architecture" >> RELEASE_NOTES.md
        echo "- Component-based storage layer with improved security" >> RELEASE_NOTES.md
        echo "- Parameterized queries prevent SQL injection" >> RELEASE_NOTES.md
        echo "- Thread-safe operations with optimized batch processing" >> RELEASE_NOTES.md
        echo "- Comprehensive node change tracking and history" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "### Installation" >> RELEASE_NOTES.md
        echo "Download the appropriate binary for your platform from the assets below." >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "### Usage" >> RELEASE_NOTES.md
        echo "\`\`\`bash" >> RELEASE_NOTES.md
        echo "# Parse nodelist files" >> RELEASE_NOTES.md
        echo "./parser -path /path/to/nodelists -db nodelist.duckdb" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "# Start web server" >> RELEASE_NOTES.md
        echo "./server -db nodelist.duckdb -port 8080" >> RELEASE_NOTES.md
        echo "\`\`\`" >> RELEASE_NOTES.md

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.get_version.outputs.tag }}
        name: NodelistDB ${{ steps.get_version.outputs.tag }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false
        generate_release_notes: true

  build-and-upload:
    name: Build and Upload
    needs: create-release
    strategy:
      matrix:
        include:
          # Native builds on respective platforms
          - runs-on: ubuntu-latest
            goos: linux
            goarch: amd64
            name: linux-amd64
            cgo: "1"
          - runs-on: ubuntu-latest
            goos: linux
            goarch: arm64
            name: linux-arm64
            cgo: "1"
          - runs-on: windows-latest
            goos: windows
            goarch: amd64
            name: windows-amd64
            cgo: "1"
          - runs-on: macos-latest
            goos: darwin
            goarch: amd64
            name: darwin-amd64
            cgo: "1"
          - runs-on: macos-latest
            goos: darwin
            goarch: arm64
            name: darwin-arm64
            cgo: "1"
    runs-on: ${{ matrix.runs-on }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install cross-compilation tools
      shell: bash
      run: |
        if [ "${{ matrix.goos }}" = "linux" ] && [ "${{ matrix.goarch }}" = "arm64" ]; then
          # Install ARM64 cross-compilation tools on Ubuntu
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX=aarch64-linux-gnu-g++" >> $GITHUB_ENV
        elif [ "${{ matrix.goos }}" = "windows" ]; then
          # Windows builds run on windows-latest, no cross-compilation needed
          echo "Windows native build"
        elif [ "${{ matrix.goos }}" = "darwin" ]; then
          # macOS builds run on macos-latest, no cross-compilation needed  
          echo "macOS native build"
        fi

    # Cache disabled to avoid GitHub Actions cache corruption warnings
    # - name: Cache Go modules
    #   uses: actions/cache@v4
    #   with:
    #     path: |
    #       ~/.cache/go-build
    #       ~/go/pkg/mod
    #     key: ${{ runner.os }}-${{ matrix.goarch }}-go-${{ hashFiles('**/go.sum') }}
    #     restore-keys: |
    #       ${{ runner.os }}-${{ matrix.goarch }}-go-
    #       ${{ runner.os }}-go-

    - name: Download dependencies
      run: |
        go mod download
        go mod verify

    - name: Build binaries
      env:
        CGO_ENABLED: ${{ matrix.cgo }}
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        # Create output directory
        mkdir -p dist/${{ matrix.name }}
        
        # Get version information
        VERSION="${{ needs.create-release.outputs.tag_name }}"
        # Remove 'v' prefix from version since templates add it
        VERSION="${VERSION#v}"
        COMMIT=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
        BUILD_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        # Build flags with version injection
        LDFLAGS="-s -w -X 'nodelistdb/internal/version.Version=${VERSION}' -X 'nodelistdb/internal/version.GitCommit=${COMMIT}' -X 'nodelistdb/internal/version.BuildTime=${BUILD_TIME}'"
        
        # Build binaries
        if [ "${{ matrix.goos }}" = "windows" ]; then
          go build -ldflags="${LDFLAGS}" -o dist/${{ matrix.name }}/parser.exe ./cmd/parser
          go build -ldflags="${LDFLAGS}" -o dist/${{ matrix.name }}/server.exe ./cmd/server
        else
          go build -ldflags="${LDFLAGS}" -o dist/${{ matrix.name }}/parser ./cmd/parser
          go build -ldflags="${LDFLAGS}" -o dist/${{ matrix.name }}/server ./cmd/server
        fi
      shell: bash

    - name: Copy documentation
      shell: bash
      run: |
        # Copy README and other docs if they exist
        [ -f README.md ] && cp README.md dist/${{ matrix.name }}/
        [ -f CLAUDE.md ] && cp CLAUDE.md dist/${{ matrix.name }}/USAGE.md
        [ -f LICENSE ] && cp LICENSE dist/${{ matrix.name }}/
        
        # Copy configuration examples
        [ -f config.sample.json ] && cp config.sample.json dist/${{ matrix.name }}/config-duckdb-example.json
        [ -f config-clickhouse-test.json ] && cp config-clickhouse-test.json dist/${{ matrix.name }}/config-clickhouse-example.json
        
        # Create a simple usage file
        cat > dist/${{ matrix.name }}/USAGE.txt << 'EOF'
        NodelistDB - FidoNet Nodelist Database System
        
        PARSER USAGE:
        # DuckDB (default)
        ./parser -path <nodelist-path> -db <database-file> [options]
        
        # ClickHouse
        ./parser -path <nodelist-path> -config <config-file> -dbtype clickhouse [options]
        
        Options:
          -path string     Path to nodelist file or directory (required)
          -db string       Path to DuckDB database file (default: ./nodelist.duckdb)
          -config string   Path to configuration file (default: config.json)
          -dbtype string   Database type: 'duckdb' or 'clickhouse' (overrides config)
          -recursive       Scan directories recursively
          -verbose         Verbose output
          -batch int       Batch size for bulk inserts (default: 1000)
          -workers int     Number of concurrent workers (default: 4)
          -concurrent      Enable concurrent processing
        
        SERVER USAGE:
        # DuckDB (default)
        ./server -db <database-file> [options]
        
        # ClickHouse
        ./server -config <config-file> [options]
        
        Options:
          -db string       Path to DuckDB database file (default: ./nodelist.duckdb)
          -config string   Path to configuration file (default: config.json)
          -host string     Host to bind to (default: localhost)
          -port int        Port to listen on (default: 8080)
        
        EXAMPLES:
        # Parse a single nodelist file (DuckDB)
        ./parser -path nodelist.216 -db nodelist.duckdb -verbose
        
        # Parse all nodelists in a directory (DuckDB)
        ./parser -path /path/to/nodelists -db nodelist.duckdb -recursive -concurrent
        
        # Parse with ClickHouse
        ./parser -path nodelist.216 -config config-clickhouse-example.json -dbtype clickhouse -verbose
        
        # Start the web server (DuckDB)
        ./server -db nodelist.duckdb -host 0.0.0.0 -port 8080
        
        # Start the web server (ClickHouse)
        ./server -config config-clickhouse-example.json -host 0.0.0.0 -port 8080
        
        CONFIGURATION:
        Copy one of the example configuration files to config.json and edit as needed:
        - config-duckdb-example.json    (for DuckDB usage)
        - config-clickhouse-example.json (for ClickHouse usage)
        
        For ClickHouse, ensure your ClickHouse server is running and accessible.
        The default config connects to localhost:9000 with no authentication.
        
        API Endpoints:
        GET /api/nodes              - Search nodes
        GET /api/nodes/{z}/{n}/{n}  - Get specific node
        GET /api/stats              - Network statistics
        GET /                       - Web interface
        EOF

    - name: Package release (Windows)
      if: matrix.goos == 'windows'
      shell: pwsh
      run: |
        $archiveName = "nodelistdb-${{ needs.create-release.outputs.tag_name }}-${{ matrix.name }}.zip"
        cd dist
        if (Test-Path $archiveName) { Remove-Item $archiveName }
        Compress-Archive -Path "${{ matrix.name }}/*" -DestinationPath $archiveName
        echo "ASSET_PATH=dist/$archiveName" >> $env:GITHUB_ENV
        echo "ASSET_NAME=$archiveName" >> $env:GITHUB_ENV

    - name: Package release (Unix)
      if: matrix.goos != 'windows'
      shell: bash
      run: |
        ARCHIVE_NAME="nodelistdb-${{ needs.create-release.outputs.tag_name }}-${{ matrix.name }}.tar.gz"
        cd dist
        rm -f "$ARCHIVE_NAME"
        tar -czf "$ARCHIVE_NAME" -C "${{ matrix.name }}" .
        echo "ASSET_PATH=dist/$ARCHIVE_NAME" >> $GITHUB_ENV
        echo "ASSET_NAME=$ARCHIVE_NAME" >> $GITHUB_ENV

    - name: Upload Release Asset
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.create-release.outputs.tag_name }}
        files: ${{ env.ASSET_PATH }}

  checksums:
    name: Generate Checksums
    needs: [create-release, build-and-upload]
    runs-on: ubuntu-latest
    
    steps:
    - name: Download release assets
      uses: robinraju/release-downloader@v1.10
      with:
        tag: ${{ needs.create-release.outputs.tag_name }}
        fileName: "nodelistdb-*"
        out-file-path: "assets"

    - name: Generate checksums
      run: |
        cd assets
        sha256sum nodelistdb-* > SHA256SUMS
        md5sum nodelistdb-* > MD5SUMS

    - name: Upload checksums
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.create-release.outputs.tag_name }}
        files: |
          assets/SHA256SUMS
          assets/MD5SUMS