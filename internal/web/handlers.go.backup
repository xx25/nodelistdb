package web

import (
	"encoding/json"
	"errors"
	"fmt"
	"html/template"
	"net/http"
	"path/filepath"
	"regexp"
	"strconv"
	"strings"
	"time"

	"nodelistdb/internal/database"
	"nodelistdb/internal/storage"
)

// Server represents the web server
type Server struct {
	storage   *storage.Storage
	templates map[string]*template.Template
}

// New creates a new web server
func New(storage *storage.Storage) *Server {
	server := &Server{
		storage:   storage,
		templates: make(map[string]*template.Template),
	}
	
	server.loadTemplates()
	return server
}

// loadTemplates loads HTML templates
func (s *Server) loadTemplates() {
	templates := []string{"index", "search", "node", "stats", "sysop_search", "node_history", "api_help", "analytics", "v34_analytics", "binkp_analytics", "sysop_analytics", "network_lifecycle"}
	
	// Create function map for template functions
	funcMap := template.FuncMap{
		"getZoneDescription": getZoneDescription,
		"add": func(a, b int) int {
			return a + b
		},
		"float64": func(i interface{}) float64 {
			switch v := i.(type) {
			case int:
				return float64(v)
			case float64:
				return v
			default:
				return 0
			}
		},
		"json": func(v interface{}) string {
			b, _ := json.Marshal(v)
			return string(b)
		},
		"printf": func(format string, args ...interface{}) string {
			return fmt.Sprintf(format, args...)
		},
		"div": func(a, b interface{}) float64 {
			switch a := a.(type) {
			case int:
				switch b := b.(type) {
				case int:
					if b == 0 {
						return 0
					}
					return float64(a) / float64(b)
				default:
					return 0
				}
			case float64:
				switch b := b.(type) {
				case float64:
					if b == 0 {
						return 0
					}
					return a / b
				case int:
					if b == 0 {
						return 0
					}
					return a / float64(b)
				default:
					return 0
				}
			default:
				return 0
			}
		},
		"mul": func(a, b interface{}) float64 {
			switch a := a.(type) {
			case int:
				switch b := b.(type) {
				case int:
					return float64(a * b)
				case float64:
					return float64(a) * b
				default:
					return 0
				}
			case float64:
				switch b := b.(type) {
				case float64:
					return a * b
				case int:
					return a * float64(b)
				default:
					return 0
				}
			default:
				return 0
			}
		},
	}
	
	for _, tmpl := range templates {
		s.templates[tmpl] = template.Must(template.New(tmpl).Funcs(funcMap).Parse(s.getTemplate(tmpl)))
	}
}

// IndexHandler handles the home page
func (s *Server) IndexHandler(w http.ResponseWriter, r *http.Request) {
	data := struct {
		Title string
	}{
		Title: "FidoNet Nodelist Database",
	}
	
	s.templates["index"].Execute(w, data)
}

// SearchHandler handles node search page
func (s *Server) SearchHandler(w http.ResponseWriter, r *http.Request) {
	var nodes []database.Node
	var err error
	
	if r.Method == http.MethodPost {
		// Handle search form submission
		latestOnly := true
		filter := database.NodeFilter{
			Limit:      100,
			LatestOnly: &latestOnly,
		}
		
		// Parse full address first (takes precedence over individual fields)
		if fullAddress := r.FormValue("full_address"); fullAddress != "" {
			if zone, net, node, err := parseNodeAddress(fullAddress); err == nil {
				filter.Zone = &zone
				filter.Net = &net
				filter.Node = &node
			}
		}
		
		// Individual fields override full address if provided
		if zone := r.FormValue("zone"); zone != "" {
			if z, parseErr := strconv.Atoi(zone); parseErr == nil {
				filter.Zone = &z
			}
		}
		
		if net := r.FormValue("net"); net != "" {
			if n, parseErr := strconv.Atoi(net); parseErr == nil {
				filter.Net = &n
			}
		}
		
		if node := r.FormValue("node"); node != "" {
			if n, parseErr := strconv.Atoi(node); parseErr == nil {
				filter.Node = &n
			}
		}
		
		if systemName := r.FormValue("system_name"); systemName != "" {
			filter.SystemName = &systemName
		}
		
		if location := r.FormValue("location"); location != "" {
			filter.Location = &location
		}
		
		nodes, err = s.storage.GetNodes(filter)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
	}
	
	data := struct {
		Title   string
		Nodes   []database.Node
		Count   int
		Error   string
	}{
		Title: "Search Nodes",
		Nodes: nodes,
		Count: len(nodes),
	}
	
	if err != nil {
		data.Error = err.Error()
	}
	
	s.templates["search"].Execute(w, data)
}

// StatsHandler handles statistics page
func (s *Server) StatsHandler(w http.ResponseWriter, r *http.Request) {
	// Get available dates for the date picker
	availableDates, err := s.storage.GetAvailableDates()
	if err != nil || len(availableDates) == 0 {
		// No data at all
		data := struct {
			Title          string
			Stats          *database.NetworkStats
			Error          string
			NoData         bool
			AvailableDates []time.Time
			SelectedDate   time.Time
			RequestedDate  string
			DateMessage    string
		}{
			Title:          "Network Statistics",
			Stats:          nil,
			Error:          "No nodelist data available in the database",
			NoData:         true,
			AvailableDates: []time.Time{},
			SelectedDate:   time.Time{},
			RequestedDate:  "",
			DateMessage:    "",
		}
		s.templates["stats"].Execute(w, data)
		return
	}

	// Default to latest date
	selectedDate := availableDates[0]
	requestedDate := ""
	dateMessage := ""

	// Check if a specific date was requested
	if dateParam := r.URL.Query().Get("date"); dateParam != "" {
		requestedDate = dateParam
		if parsedDate, err := time.Parse("2006-01-02", dateParam); err == nil {
			// Find closest available date
			if closestDate, err := s.storage.GetClosestAvailableDate(parsedDate); err == nil {
				selectedDate = closestDate
				if !selectedDate.Equal(parsedDate) {
					dateMessage = fmt.Sprintf("Requested date %s not available. Showing closest available date: %s", 
						parsedDate.Format("2006-01-02"), selectedDate.Format("2006-01-02"))
				}
			}
		} else {
			dateMessage = fmt.Sprintf("Invalid date format '%s'. Please use YYYY-MM-DD format.", dateParam)
		}
	}
	
	stats, err := s.storage.GetStats(selectedDate)
	if err != nil {
		data := struct {
			Title          string
			Stats          *database.NetworkStats
			Error          string
			NoData         bool
			AvailableDates []time.Time
			SelectedDate   time.Time
			RequestedDate  string
			DateMessage    string
		}{
			Title:          "Network Statistics",
			Stats:          nil,
			Error:          fmt.Sprintf("Failed to retrieve statistics: %v", err),
			NoData:         false,
			AvailableDates: availableDates,
			SelectedDate:   selectedDate,
			RequestedDate:  requestedDate,
			DateMessage:    dateMessage,
		}
		s.templates["stats"].Execute(w, data)
		return
	}
	
	data := struct {
		Title          string
		Stats          *database.NetworkStats
		Error          string
		NoData         bool
		AvailableDates []time.Time
		SelectedDate   time.Time
		RequestedDate  string
		DateMessage    string
	}{
		Title:          "Network Statistics",
		Stats:          stats,
		Error:          "",
		NoData:         false,
		AvailableDates: availableDates,
		SelectedDate:   selectedDate,
		RequestedDate:  requestedDate,
		DateMessage:    dateMessage,
	}
	
	s.templates["stats"].Execute(w, data)
}

// SysopSearchHandler handles sysop name search page
func (s *Server) SysopSearchHandler(w http.ResponseWriter, r *http.Request) {
	var nodes []storage.NodeSummary
	var sysopName string
	var err error
	
	if r.Method == http.MethodPost {
		sysopName = r.FormValue("sysop_name")
		if sysopName != "" {
			// Convert spaces to underscores as that's how data is stored in nodelist database
			searchName := strings.ReplaceAll(sysopName, " ", "_")
			nodes, err = s.storage.SearchNodesBySysop(searchName, 50)
			if err != nil {
				http.Error(w, err.Error(), http.StatusInternalServerError)
				return
			}
		}
	}
	
	data := struct {
		Title     string
		Nodes     []storage.NodeSummary
		Count     int
		SysopName string
		Error     string
	}{
		Title:     "Search by Sysop Name",
		Nodes:     nodes,
		Count:     len(nodes),
		SysopName: sysopName,
	}
	
	if err != nil {
		data.Error = err.Error()
	}
	
	s.templates["sysop_search"].Execute(w, data)
}

// NodeHistoryHandler handles node history page
func (s *Server) NodeHistoryHandler(w http.ResponseWriter, r *http.Request) {
	// Parse URL path: /node/{zone}/{net}/{node}
	path := r.URL.Path[6:] // Remove "/node/"
	parts := strings.Split(path, "/")
	if len(parts) < 3 {
		http.Error(w, "Invalid node address format", http.StatusBadRequest)
		return
	}
	
	zone, err := strconv.Atoi(parts[0])
	if err != nil {
		http.Error(w, "Invalid zone number", http.StatusBadRequest)
		return
	}
	
	net, err := strconv.Atoi(parts[1])
	if err != nil {
		http.Error(w, "Invalid net number", http.StatusBadRequest)
		return
	}
	
	node, err := strconv.Atoi(parts[2])
	if err != nil {
		http.Error(w, "Invalid node number", http.StatusBadRequest)
		return
	}
	
	// Get node history
	history, err := s.storage.GetNodeHistory(zone, net, node)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	
	if len(history) == 0 {
		http.Error(w, "Node not found", http.StatusNotFound)
		return
	}
	
	// Get date range
	firstDate, lastDate, _ := s.storage.GetNodeDateRange(zone, net, node)
	
	// Parse filter options from query parameters
	query := r.URL.Query()
	filter := storage.ChangeFilter{
		IgnoreFlags:              query.Get("noflags") == "1",
		IgnorePhone:              query.Get("nophone") == "1",
		IgnoreSpeed:              query.Get("nospeed") == "1",
		IgnoreStatus:             query.Get("nostatus") == "1",
		IgnoreLocation:           query.Get("nolocation") == "1",
		IgnoreName:               query.Get("noname") == "1",
		IgnoreSysop:              query.Get("nosysop") == "1",
		IgnoreConnectivity:       query.Get("noconnectivity") == "1",
		IgnoreInternetProtocols:  query.Get("nointernetprotocols") == "1",
		IgnoreInternetHostnames:  query.Get("nointernethostnames") == "1",
		IgnoreInternetPorts:      query.Get("nointernetports") == "1",
		IgnoreInternetEmails:     query.Get("nointernetemails") == "1",
		IgnoreModemFlags:         query.Get("nomodemflags") == "1",
	}
	
	// Get changes
	changes, err := s.storage.GetNodeChanges(zone, net, node, filter)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	
	// Determine if node is currently active by checking if last history entry is from the most recent nodelist
	var currentlyActive bool
	if len(history) > 0 {
		// Get the most recent nodelist date efficiently
		maxDate, err := s.storage.GetMaxNodelistDate()
		if err == nil {
			currentlyActive = history[len(history)-1].NodelistDate.Equal(maxDate)
		}
	}
	
	data := struct {
		Title           string
		Address         string
		Zone            int
		Net             int
		Node            int
		History         []database.Node
		Changes         []database.NodeChange
		FirstDate       time.Time
		LastDate        time.Time
		CurrentlyActive bool
		Filter          storage.ChangeFilter
	}{
		Title:           "Node History",
		Address:         fmt.Sprintf("%d:%d/%d", zone, net, node),
		Zone:            zone,
		Net:             net,
		Node:            node,
		History:         history,
		Changes:         changes,
		FirstDate:       firstDate,
		LastDate:        lastDate,
		CurrentlyActive: currentlyActive,
		Filter:          filter,
	}
	
	s.templates["node_history"].Execute(w, data)
}

// APIHelpHandler handles the API help page
func (s *Server) APIHelpHandler(w http.ResponseWriter, r *http.Request) {
	data := struct {
		Title string
	}{
		Title: "API Documentation",
	}
	
	s.templates["api_help"].Execute(w, data)
}

// SetupRoutes sets up web routes
func (s *Server) SetupRoutes(mux *http.ServeMux) {
	mux.HandleFunc("/", s.IndexHandler)
	mux.HandleFunc("/search", s.SearchHandler)
	mux.HandleFunc("/search/sysop", s.SysopSearchHandler)
	mux.HandleFunc("/stats", s.StatsHandler)
	mux.HandleFunc("/analytics", s.AnalyticsHandler)
	mux.HandleFunc("/analytics/v34", s.V34AnalyticsHandler)
	mux.HandleFunc("/analytics/binkp", s.BinkpAnalyticsHandler)
	mux.HandleFunc("/analytics/network/", s.NetworkLifecycleHandler)
	mux.HandleFunc("/analytics/sysops", s.SysopNamesHandler)
	mux.HandleFunc("/analytics/trends", s.ProtocolTrendHandler)
	mux.HandleFunc("/api/help", s.APIHelpHandler)
	mux.HandleFunc("/node/", s.NodeHistoryHandler)
	
	// Serve static files
	mux.HandleFunc("/static/", s.StaticHandler)
}

// StaticHandler serves static files
func (s *Server) StaticHandler(w http.ResponseWriter, r *http.Request) {
	// Simple static file serving - in production, use http.FileServer
	path := r.URL.Path[len("/static/"):]
	
	switch filepath.Ext(path) {
	case ".css":
		w.Header().Set("Content-Type", "text/css")
		w.Write([]byte(s.getCSS()))
	case ".js":
		w.Header().Set("Content-Type", "application/javascript")
		w.Write([]byte(s.getJS()))
	default:
		http.NotFound(w, r)
	}
}

// AnalyticsHandler handles the analytics main page
func (s *Server) AnalyticsHandler(w http.ResponseWriter, r *http.Request) {
	data := struct {
		Title string
	}{
		Title: "FidoNet Analytics",
	}
	
	s.templates["analytics"].Execute(w, data)
}

// V34AnalyticsHandler handles V.34 modem analysis
func (s *Server) V34AnalyticsHandler(w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	
	report, err := s.storage.GetV34ModemReport()
	if err != nil {
		data := struct {
			Title string
			Error string
		}{
			Title: "V.34 Modem Analysis",
			Error: fmt.Sprintf("Failed to generate V.34 analysis: %v", err),
		}
		s.templates["v34_analytics"].Execute(w, data)
		return
	}
	
	data := struct {
		Title     string
		Report    *database.V34ModemReport
		QueryTime time.Duration
	}{
		Title:     "V.34 Modem Analysis",
		Report:    report,
		QueryTime: time.Since(startTime),
	}
	
	s.templates["v34_analytics"].Execute(w, data)
}

// BinkpAnalyticsHandler handles Binkp protocol analysis
func (s *Server) BinkpAnalyticsHandler(w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	
	report, err := s.storage.GetBinkpReport()
	if err != nil {
		data := struct {
			Title string
			Error string
		}{
			Title: "Binkp Protocol Analysis",
			Error: fmt.Sprintf("Failed to generate Binkp analysis: %v", err),
		}
		s.templates["binkp_analytics"].Execute(w, data)
		return
	}
	
	data := struct {
		Title     string
		Report    *database.BinkpReport
		QueryTime time.Duration
	}{
		Title:     "Binkp Protocol Analysis",
		Report:    report,
		QueryTime: time.Since(startTime),
	}
	
	s.templates["binkp_analytics"].Execute(w, data)
}

// NetworkLifecycleHandler handles network lifecycle analysis
func (s *Server) NetworkLifecycleHandler(w http.ResponseWriter, r *http.Request) {
	var zone, net int
	var err error
	
	// Try to parse from query parameters first (/analytics/network/?zone=2&net=5001)
	zoneStr := r.URL.Query().Get("zone")
	netStr := r.URL.Query().Get("net")
	
	if zoneStr != "" && netStr != "" {
		zone, err = strconv.Atoi(zoneStr)
		if err != nil {
			http.Error(w, "Invalid zone parameter", http.StatusBadRequest)
			return
		}
		
		net, err = strconv.Atoi(netStr)
		if err != nil {
			http.Error(w, "Invalid net parameter", http.StatusBadRequest)
			return
		}
	} else {
		// Fall back to URL path parsing /analytics/network/{zone}/{net}
		parts := strings.Split(r.URL.Path, "/")
		if len(parts) < 5 {
			http.Error(w, "Invalid network address. Use /analytics/network/?zone=X&net=Y or /analytics/network/X/Y", http.StatusBadRequest)
			return
		}
		
		zone, err = strconv.Atoi(parts[3])
		if err != nil {
			http.Error(w, "Invalid zone in URL path", http.StatusBadRequest)
			return
		}
		
		net, err = strconv.Atoi(parts[4])
		if err != nil {
			http.Error(w, "Invalid net in URL path", http.StatusBadRequest)
			return
		}
	}
	
	startTime := time.Now()
	report, err := s.storage.GetNetworkLifecycleReport(zone, net)
	if err != nil {
		data := struct {
			Title string
			Error string
			Zone  int
			Net   int
		}{
			Title: "Network Lifecycle Analysis",
			Error: fmt.Sprintf("Failed to generate network analysis: %v", err),
			Zone:  zone,
			Net:   net,
		}
		s.templates["network_lifecycle"].Execute(w, data)
		return
	}
	
	data := struct {
		Title     string
		Report    *database.NetworkLifecycleReport
		QueryTime time.Duration
	}{
		Title:     "Network Lifecycle Analysis",
		Report:    report,
		QueryTime: time.Since(startTime),
	}
	
	s.templates["network_lifecycle"].Execute(w, data)
}

// SysopNamesHandler handles sysop name analysis
func (s *Server) SysopNamesHandler(w http.ResponseWriter, r *http.Request) {
	// Get year parameter, default to current year
	yearStr := r.URL.Query().Get("year")
	year := time.Now().Year()
	if yearStr != "" {
		if parsedYear, err := strconv.Atoi(yearStr); err == nil && parsedYear > 1980 && parsedYear <= time.Now().Year() {
			year = parsedYear
		}
	}
	
	startTime := time.Now()
	report, err := s.storage.GetSysopNameReportByYear(year)
	if err != nil {
		data := struct {
			Title string
			Error string
			Year  int
		}{
			Title: "Sysop Name Analysis",
			Error: fmt.Sprintf("Failed to generate sysop name analysis: %v", err),
			Year:  year,
		}
		s.templates["sysop_analytics"].Execute(w, data)
		return
	}
	
	data := struct {
		Title     string
		Report    *database.SysopNameReport
		QueryTime time.Duration
	}{
		Title:     "Sysop Name Analysis",
		Report:    report,
		QueryTime: time.Since(startTime),
	}
	
	s.templates["sysop_analytics"].Execute(w, data)
}

// ProtocolTrendHandler handles protocol adoption trend analysis
func (s *Server) ProtocolTrendHandler(w http.ResponseWriter, r *http.Request) {
	protocol := r.URL.Query().Get("protocol")
	if protocol == "" {
		protocol = "V34" // Default
	}
	
	startTime := time.Now()
	report, err := s.storage.GetProtocolAdoptionTrend(protocol)
	if err != nil {
		data := struct {
			Title    string
			Error    string
			Protocol string
		}{
			Title:    "Protocol Adoption Trends",
			Error:    fmt.Sprintf("Failed to generate protocol trend analysis: %v", err),
			Protocol: protocol,
		}
		s.templates["protocol_trend"].Execute(w, data)
		return
	}
	
	data := struct {
		Title     string
		Report    *database.ProtocolAdoptionReport
		QueryTime time.Duration
	}{
		Title:     "Protocol Adoption Trends",
		Report:    report,
		QueryTime: time.Since(startTime),
	}
	
	s.templates["protocol_trend"].Execute(w, data)
}

// parseNodeAddress parses a FidoNet node address like "2:5001/100" or "1:234/56.7"
func parseNodeAddress(address string) (zone, net, node int, err error) {
	// Remove any whitespace
	address = strings.TrimSpace(address)
	
	// Regular expression to match FidoNet address format: zone:net/node[.point]
	// We only care about zone:net/node for this search
	re := regexp.MustCompile(`^(\d+):(\d+)/(\d+)(?:\.(\d+))?$`)
	matches := re.FindStringSubmatch(address)
	
	if len(matches) < 4 {
		return 0, 0, 0, errors.New("invalid node address format")
	}
	
	zone, err = strconv.Atoi(matches[1])
	if err != nil {
		return 0, 0, 0, err
	}
	
	net, err = strconv.Atoi(matches[2])
	if err != nil {
		return 0, 0, 0, err
	}
	
	node, err = strconv.Atoi(matches[3])
	if err != nil {
		return 0, 0, 0, err
	}
	
	return zone, net, node, nil
}

// getZoneDescription returns the description for a FidoNet zone
func getZoneDescription(zone int) string {
	switch zone {
	case 1:
		return "North America (USA and Canada)"
	case 2:
		return "Europe, Former Soviet Union, and Israel"
	case 3:
		return "Australasia (includes former Zone 6 nodes)"
	case 4:
		return "Latin America (except Puerto Rico)"
	case 5:
		return "Africa"
	case 6:
		return "Asia (removed July 2007, nodes moved to Zone 3)"
	default:
		return "Unknown Zone"
	}
}

// Template definitions
func (s *Server) getTemplate(name string) string {
	switch name {
	case "index":
		return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{.Title}}</title>
    <link rel="stylesheet" href="/static/style.css">
</head>
<body>
    <div class="container">
        <header>
            <h1>{{.Title}}</h1>
            <p class="subtitle">Comprehensive FidoNet historical data and analytics</p>
        </header>
        
        <nav>
            <div class="nav-container">
                <a href="/" class="active">🏠 Home</a>
                <a href="/search">🔍 Search Nodes</a>
                <a href="/search/sysop">👤 Search Sysops</a>
                <a href="/stats">📊 Statistics</a>
                <a href="/analytics">🔬 Analytics</a>
                <a href="/api/help">📖 API Help</a>
            </div>
        </nav>
        
        <div class="content">
            <div class="card">
                <p style="font-size: 1.1rem; color: var(--text-secondary); margin-bottom: 2rem;">
                    Welcome to the FidoNet Nodelist Database. This system provides comprehensive access to historical and current FidoNet node information, featuring advanced search capabilities and detailed historical analysis.
                </p>
                
                <h2 style="margin-bottom: 1.5rem; color: var(--text-primary);">Quick Actions</h2>
                
                <div class="stats-grid">
                    <div class="stat-card">
                        <h3>🔍</h3>
                        <p style="color: var(--text-primary); font-size: 1rem; margin-top: 1rem;">
                            <a href="/search" class="btn" style="text-decoration: none; display: inline-block; margin-top: 0.5rem;">Search Nodes</a>
                        </p>
                        <small style="color: var(--text-secondary);">Find nodes by zone, net, system name, or location</small>
                    </div>
                    
                    <div class="stat-card">
                        <h3>👤</h3>
                        <p style="color: var(--text-primary); font-size: 1rem; margin-top: 1rem;">
                            <a href="/search/sysop" class="btn" style="text-decoration: none; display: inline-block; margin-top: 0.5rem;">Search Sysops</a>
                        </p>
                        <small style="color: var(--text-secondary);">Find all nodes operated by a specific sysop</small>
                    </div>
                    
                    <div class="stat-card">
                        <h3>📊</h3>
                        <p style="color: var(--text-primary); font-size: 1rem; margin-top: 1rem;">
                            <a href="/stats" class="btn" style="text-decoration: none; display: inline-block; margin-top: 0.5rem;">Statistics</a>
                        </p>
                        <small style="color: var(--text-secondary);">View network statistics and trends</small>
                    </div>
                </div>
                
                <div class="alert alert-success" style="margin-top: 2rem;">
                    <strong>✨ New Feature:</strong> Historical node tracking with timeline visualization and change filtering is now available!
                </div>
            </div>
        </div>
    </div>
</body>
</html>`

	case "search":
		return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{.Title}}</title>
    <link rel="stylesheet" href="/static/style.css">
</head>
<body>
    <div class="container">
        <header>
            <h1>{{.Title}}</h1>
            <p class="subtitle">Find FidoNet nodes by address, system name, or location</p>
        </header>
        
        <nav>
            <div class="nav-container">
                <a href="/">🏠 Home</a>
                <a href="/search" class="active">🔍 Search Nodes</a>
                <a href="/search/sysop">👤 Search Sysops</a>
                <a href="/stats">📊 Statistics</a>
                <a href="/analytics">🔬 Analytics</a>
                <a href="/api/help">📖 API Help</a>
            </div>
        </nav>
        
        <div class="content">
            <div class="card">
                <form method="post" class="search-form">
                    <div class="form-group" style="grid-column: span 2;">
                        <label for="full_address">Full Node Address:</label>
                        <input type="text" id="full_address" name="full_address" placeholder="e.g. 2:5001/100 or 1:234/56.7" style="font-family: monospace;">
                        <small style="color: var(--text-secondary); margin-top: 0.25rem; display: block;">
                            💡 Enter complete address like "2:5001/100" or use individual fields below
                        </small>
                    </div>
                    
                    <div class="form-group">
                        <label for="zone">Zone:</label>
                        <select id="zone" name="zone">
                            <option value="">All Zones</option>
                            <option value="1">Zone 1 - United States and Canada</option>
                            <option value="2">Zone 2 - Europe, Former Soviet Union, and Israel</option>
                            <option value="3">Zone 3 - Australasia (includes former Zone 6 nodes)</option>
                            <option value="4">Zone 4 - Latin America (except Puerto Rico)</option>
                            <option value="5">Zone 5 - Africa</option>
                            <option value="6">Zone 6 - Asia (removed July 2007, nodes moved to Zone 3)</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="net">Net:</label>
                        <input type="number" id="net" name="net" placeholder="e.g. 234" min="0">
                    </div>
                    
                    <div class="form-group">
                        <label for="node">Node:</label>
                        <input type="number" id="node" name="node" placeholder="e.g. 56" min="0">
                    </div>
                    
                    <div class="form-group">
                        <label for="system_name">System Name:</label>
                        <input type="text" id="system_name" name="system_name" placeholder="e.g. Example BBS">
                    </div>
                    
                    <div class="form-group">
                        <label for="location">Location:</label>
                        <input type="text" id="location" name="location" placeholder="e.g. New York, NY">
                    </div>
                    
                    <div class="form-group" style="align-self: end;">
                        <button type="submit" class="btn">🔍 Search Nodes</button>
                    </div>
                </form>
                
                <div style="margin-top: 1rem; padding: 1rem; background: #f8fafc; border-radius: var(--radius); font-size: 0.9rem; color: var(--text-secondary);">
                    💡 <strong>Tip:</strong> You can search by any combination of fields. Leave fields empty to search more broadly.
                </div>
            </div>
            
            {{if .Error}}
                <div class="alert alert-error">
                    <strong>Error:</strong> {{.Error}}
                </div>
            {{end}}
            
            {{if .Nodes}}
                <div class="card">
                    <h2 style="color: var(--text-primary); margin-bottom: 1rem;">
                        Search Results 
                        <span class="badge badge-info" style="font-size: 0.8rem; margin-left: 0.5rem;">
                            {{.Count}} nodes found
                        </span>
                    </h2>
                    
                    <div class="table-container">
                        <table>
                            <thead>
                                <tr>
                                    <th>Address</th>
                                    <th>System Name</th>
                                    <th>Location</th>
                                    <th>Sysop</th>
                                    <th>Type</th>
                                    <th>Date</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{range .Nodes}}
                                <tr>
                                    <td>
                                        <strong>
                                            <a href="/node/{{.Zone}}/{{.Net}}/{{.Node}}">{{.Zone}}:{{.Net}}/{{.Node}}</a>
                                        </strong>
                                    </td>
                                    <td>{{if .SystemName}}{{.SystemName}}{{else}}<em>-</em>{{end}}</td>
                                    <td>{{if .Location}}{{.Location}}{{else}}<em>-</em>{{end}}</td>
                                    <td>{{if .SysopName}}{{.SysopName}}{{else}}<em>-</em>{{end}}</td>
                                    <td>
                                        {{if eq .NodeType "Zone"}}<span class="badge badge-error">Zone</span>
                                        {{else if eq .NodeType "Region"}}<span class="badge badge-warning">Region</span>
                                        {{else if eq .NodeType "Host"}}<span class="badge badge-info">Host</span>
                                        {{else if eq .NodeType "Hub"}}<span class="badge badge-success">Hub</span>
                                        {{else if eq .NodeType "Pvt"}}<span class="badge badge-warning">Pvt</span>
                                        {{else if eq .NodeType "Down"}}<span class="badge badge-error">Down</span>
                                        {{else if eq .NodeType "Hold"}}<span class="badge badge-warning">Hold</span>
                                        {{else}}{{.NodeType}}{{end}}
                                    </td>
                                    <td style="font-size: 0.9rem; color: var(--text-secondary);">
                                        {{.NodelistDate.Format "2006-01-02"}}
                                    </td>
                                    <td>
                                        <a href="/node/{{.Zone}}/{{.Net}}/{{.Node}}" class="btn btn-secondary" style="font-size: 0.8rem; padding: 0.4rem 0.8rem;">
                                            📈 History
                                        </a>
                                    </td>
                                </tr>
                                {{end}}
                            </tbody>
                        </table>
                    </div>
                </div>
            {{end}}
        </div>
    </div>
    <script src="/static/app.js"></script>
</body>
</html>`

	case "stats":
		return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{.Title}}</title>
    <link rel="stylesheet" href="/static/style.css">
</head>
<body>
    <div class="container">
        <header>
            <h1>{{.Title}}</h1>
            <p class="subtitle">FidoNet network statistics and metrics</p>
        </header>
        
        <nav>
            <div class="nav-container">
                <a href="/">🏠 Home</a>
                <a href="/search">🔍 Search Nodes</a>
                <a href="/search/sysop">👤 Search Sysops</a>
                <a href="/stats" class="active">📊 Statistics</a>
                <a href="/analytics">🔬 Analytics</a>
                <a href="/api/help">📖 API Help</a>
            </div>
        </nav>
        
        <div class="content">
            {{if not .NoData}}
                <!-- Date Selection Form -->
                <div class="card" style="margin-bottom: 2rem;">
                    <h3 style="margin-bottom: 1rem; color: var(--text-primary);">📅 Select Date for Statistics</h3>
                    <form method="GET" action="/stats" style="display: flex; gap: 1rem; align-items: end; flex-wrap: wrap;">
                        <div style="flex: 1; min-width: 200px;">
                            <label for="date" style="display: block; margin-bottom: 0.5rem; font-weight: 600; color: var(--text-primary);">Choose Date:</label>
                            <input 
                                type="date" 
                                id="date" 
                                name="date" 
                                value="{{if .RequestedDate}}{{.RequestedDate}}{{else}}{{.SelectedDate.Format "2006-01-02"}}{{end}}"
                                style="padding: 0.75rem; border: 1px solid var(--border-color); border-radius: var(--radius); font-size: 1rem; width: 100%;"
                            />
                        </div>
                        <div>
                            <button type="submit" class="btn btn-primary" style="padding: 0.75rem 1.5rem;">
                                📊 View Statistics
                            </button>
                        </div>
                    </form>
                    {{if .DateMessage}}
                        <div style="margin-top: 1rem; padding: 0.75rem; background: var(--accent-color); border-left: 4px solid var(--primary-color); border-radius: var(--radius); color: var(--text-primary);">
                            ℹ️ {{.DateMessage}}
                        </div>
                    {{end}}
                    {{if gt (len .AvailableDates) 0}}
                        <div style="margin-top: 1rem; font-size: 0.9rem; color: var(--text-secondary);">
                            <strong>📊 {{len .AvailableDates}} nodelist{{if ne (len .AvailableDates) 1}}s{{end}} available</strong>
                            {{if gt (len .AvailableDates) 1}}
                                <br>Date range: {{(index .AvailableDates 0).Format "2006-01-02"}} (newest) to older dates
                            {{end}}
                        </div>
                    {{end}}
                </div>
            {{end}}
            
            {{if .NoData}}
                <div class="card">
                    <div class="alert alert-error">
                        <strong>📊 No Data Available</strong><br>
                        {{.Error}}
                    </div>
                    <p style="margin-top: 1rem; color: var(--text-secondary);">
                        To populate statistics, please import nodelist files using the parser tool:<br>
                        <code style="background: #f1f5f9; padding: 0.2rem 0.4rem; border-radius: 0.25rem;">./bin/parser -path /path/to/nodelists -db ./nodelist.duckdb</code>
                    </p>
                </div>
            {{else if .Error}}
                <div class="alert alert-error">
                    <strong>Error:</strong> {{.Error}}
                </div>
            {{else if .Stats}}
                <div class="card">
                    <h2 style="color: var(--text-primary); margin-bottom: 1.5rem;">
                        📊 Network Statistics for {{.Stats.Date.Format "January 2, 2006"}}
                    </h2>
                    
                    <div class="stats-grid">
                        <div class="stat-card">
                            <h3>{{.Stats.TotalNodes}}</h3>
                            <p>Total Nodes</p>
                        </div>
                        
                        <div class="stat-card">
                            <h3>{{.Stats.ActiveNodes}}</h3>
                            <p>Active Nodes</p>
                        </div>
                        
                        <div class="stat-card">
                            <h3>{{.Stats.CMNodes}}</h3>
                            <p>CM Nodes</p>
                        </div>
                        
                        <div class="stat-card">
                            <h3>{{.Stats.BinkpNodes}}</h3>
                            <p>Binkp Nodes</p>
                        </div>
                        
                        <div class="stat-card">
                            <h3>{{.Stats.InternetNodes}}</h3>
                            <p>Internet Nodes</p>
                        </div>
                        
                        <div class="stat-card">
                            <h3>{{.Stats.DownNodes}}</h3>
                            <p>Down Nodes</p>
                        </div>
                        
                        <div class="stat-card">
                            <h3>{{.Stats.HoldNodes}}</h3>
                            <p>Hold Nodes</p>
                        </div>
                        
                        <div class="stat-card">
                            <h3>{{.Stats.PvtNodes}}</h3>
                            <p>Private Nodes</p>
                        </div>
                    </div>
                </div>
                
                {{if .Stats.ZoneDistribution}}
                    <div class="card">
                        <h3 style="color: var(--text-primary); margin-bottom: 1.5rem;">🌍 Zone Distribution</h3>
                        
                        <div class="table-container">
                            <table>
                                <thead>
                                    <tr>
                                        <th>Zone</th>
                                        <th>Description</th>
                                        <th>Node Count</th>
                                        <th>Percentage</th>
                                        <th>Representation</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {{range $zone, $count := .Stats.ZoneDistribution}}
                                    <tr>
                                        <td><strong>Zone {{$zone}}</strong></td>
                                        <td style="color: var(--text-secondary);">{{getZoneDescription $zone}}</td>
                                        <td>{{$count}} nodes</td>
                                        <td style="color: var(--text-secondary);">
                                            {{printf "%.1f%%" (div (mul $count 100) $.Stats.TotalNodes)}}
                                        </td>
                                        <td>
                                            <div style="background: #e2e8f0; height: 8px; border-radius: 4px; overflow: hidden;">
                                                <div style="background: var(--primary-color); height: 100%; width: {{printf "%.1f%%" (div (mul $count 100) $.Stats.TotalNodes)}}; transition: width 0.3s ease;"></div>
                                            </div>
                                        </td>
                                    </tr>
                                    {{end}}
                                </tbody>
                            </table>
                        </div>
                    </div>
                {{end}}
                
                {{if .Stats.LargestRegions}}
                    <div class="card">
                        <h3 style="color: var(--text-primary); margin-bottom: 1.5rem;">🏛️ Largest Regions</h3>
                        
                        <div class="table-container">
                            <table>
                                <thead>
                                    <tr>
                                        <th>Region</th>
                                        <th>Name</th>
                                        <th>Zone</th>
                                        <th>Node Count</th>
                                        <th>Representation</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {{range .Stats.LargestRegions}}
                                    <tr>
                                        <td><strong>Region {{.Region}}</strong></td>
                                        <td style="color: var(--text-secondary);">{{if .Name}}{{.Name}}{{else}}<em>-</em>{{end}}</td>
                                        <td>Zone {{.Zone}}</td>
                                        <td>{{.NodeCount}} nodes</td>
                                        <td>
                                            <div style="background: #e2e8f0; height: 8px; border-radius: 4px; overflow: hidden;">
                                                <div style="background: var(--primary-color); height: 100%; width: {{printf "%.1f%%" (div (mul .NodeCount 100) $.Stats.TotalNodes)}}; transition: width 0.3s ease;"></div>
                                            </div>
                                        </td>
                                    </tr>
                                    {{end}}
                                </tbody>
                            </table>
                        </div>
                    </div>
                {{end}}
                
                {{if .Stats.LargestNets}}
                    <div class="card">
                        <h3 style="color: var(--text-primary); margin-bottom: 1.5rem;">🌐 Largest Networks</h3>
                        
                        <div class="table-container">
                            <table>
                                <thead>
                                    <tr>
                                        <th>Network</th>
                                        <th>Network Description</th>
                                        <th>Node Count</th>
                                        <th>Representation</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {{range .Stats.LargestNets}}
                                    <tr>
                                        <td><strong>{{.Zone}}:{{.Net}}</strong></td>
                                        <td style="color: var(--text-secondary);">{{if .Name}}{{.Name}}{{else}}<em>-</em>{{end}}</td>
                                        <td>{{.NodeCount}} nodes</td>
                                        <td>
                                            <div style="background: #e2e8f0; height: 8px; border-radius: 4px; overflow: hidden;">
                                                <div style="background: var(--success-color); height: 100%; width: {{printf "%.1f%%" (div (mul .NodeCount 100) $.Stats.TotalNodes)}}; transition: width 0.3s ease;"></div>
                                            </div>
                                        </td>
                                    </tr>
                                    {{end}}
                                </tbody>
                            </table>
                        </div>
                    </div>
                {{end}}
                
                <div class="alert alert-success">
                    <strong>💡 Did you know?</strong> This data represents the current state of the FidoNet network. Use the historical node search to explore how individual nodes have changed over time!
                </div>
            {{end}}
        </div>
    </div>
</body>
</html>`

	case "sysop_search":
		return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{.Title}}</title>
    <link rel="stylesheet" href="/static/style.css">
</head>
<body>
    <div class="container">
        <header>
            <h1>{{.Title}}</h1>
            <p class="subtitle">Find all nodes operated by a specific sysop</p>
        </header>
        
        <nav>
            <div class="nav-container">
                <a href="/">🏠 Home</a>
                <a href="/search">🔍 Search Nodes</a>
                <a href="/search/sysop" class="active">👤 Search Sysops</a>
                <a href="/stats">📊 Statistics</a>
                <a href="/analytics">🔬 Analytics</a>
                <a href="/api/help">📖 API Help</a>
            </div>
        </nav>
        
        <div class="content">
            <div class="card">
                <form method="post" class="search-form">
                    <div class="form-group" style="grid-column: span 2;">
                        <label for="sysop_name">Sysop Name:</label>
                        <input type="text" id="sysop_name" name="sysop_name" value="{{.SysopName}}" placeholder="e.g. John Doe or John_Doe" required>
                        <small style="color: var(--text-secondary); margin-top: 0.25rem; display: block;">
                            💡 You can use either spaces or underscores - both "John Doe" and "John_Doe" will work
                        </small>
                    </div>
                    
                    <div class="form-group" style="align-self: end;">
                        <button type="submit" class="btn">👤 Search Sysops</button>
                    </div>
                </form>
                
                <div style="margin-top: 1rem; padding: 1rem; background: #f8fafc; border-radius: var(--radius); font-size: 0.9rem; color: var(--text-secondary);">
                    💡 <strong>Tip:</strong> Search will find all nodes that have ever been operated by this sysop, including historical records.
                </div>
            </div>
            
            {{if .Error}}
                <div class="alert alert-error">
                    <strong>Error:</strong> {{.Error}}
                </div>
            {{end}}
            
            {{if .Nodes}}
                <div class="card">
                    <h2 style="color: var(--text-primary); margin-bottom: 1rem;">
                        Search Results 
                        <span class="badge badge-info" style="font-size: 0.8rem; margin-left: 0.5rem;">
                            {{.Count}} nodes found
                        </span>
                    </h2>
                    
                    <div class="table-container">
                        <table>
                            <thead>
                                <tr>
                                    <th>Address</th>
                                    <th>System Name</th>
                                    <th>Location</th>
                                    <th>Sysop</th>
                                    <th>Active Period</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{range .Nodes}}
                                <tr>
                                    <td>
                                        <strong>
                                            <a href="/node/{{.Zone}}/{{.Net}}/{{.Node}}">{{.Zone}}:{{.Net}}/{{.Node}}</a>
                                        </strong>
                                    </td>
                                    <td>{{if .SystemName}}{{.SystemName}}{{else}}<em>-</em>{{end}}</td>
                                    <td>{{if .Location}}{{.Location}}{{else}}<em>-</em>{{end}}</td>
                                    <td>{{if .SysopName}}{{.SysopName}}{{else}}<em>-</em>{{end}}</td>
                                    <td style="font-size: 0.9rem; color: var(--text-secondary);">
                                        {{.FirstDate.Format "2006-01-02"}} - {{if .CurrentlyActive}}now{{else}}{{.LastDate.Format "2006-01-02"}}{{end}}
                                    </td>
                                    <td>
                                        {{if .CurrentlyActive}}
                                            <span class="badge badge-success">Active</span>
                                        {{else}}
                                            <span class="badge badge-warning">Inactive</span>
                                        {{end}}
                                    </td>
                                    <td>
                                        <a href="/node/{{.Zone}}/{{.Net}}/{{.Node}}" class="btn btn-secondary" style="font-size: 0.8rem; padding: 0.4rem 0.8rem;">
                                            📈 History
                                        </a>
                                    </td>
                                </tr>
                                {{end}}
                            </tbody>
                        </table>
                    </div>
                </div>
            {{end}}
        </div>
    </div>
    <script src="/static/app.js"></script>
</body>
</html>`

	case "node_history":
		return `<!DOCTYPE html>
<html>
<head>
    <title>{{.Title}} - {{.Address}}</title>
    <link rel="stylesheet" href="/static/style.css">
</head>
<body>
    <div class="container">
        <h1>{{.Title}} - {{.Address}}</h1>
        <nav>
            <div class="nav-container">
                <a href="/">🏠 Home</a>
                <a href="/search">🔍 Search Nodes</a>
                <a href="/search/sysop">👤 Search Sysops</a>
                <a href="/stats">📊 Statistics</a>
                <a href="/analytics">🔬 Analytics</a>
                <a href="/api/help">📖 API Help</a>
            </div>
        </nav>
        
        <div class="content">
            <h2>Node Information</h2>
            <p><strong>Address:</strong> {{.Address}}</p>
            <p><strong>Active Period:</strong> {{.FirstDate.Format "2006-01-02"}} - {{if .CurrentlyActive}}now{{else}}{{.LastDate.Format "2006-01-02"}}{{end}}</p>
            <p><strong>Total Entries:</strong> {{len .History}}</p>
            <p><strong>Changes:</strong> {{len .Changes}}</p>
            
            <h3>Filter Options</h3>
            <form method="get">
                <div class="filter-options">
                    <label><input type="checkbox" name="noflags" value="1" {{if .Filter.IgnoreFlags}}checked{{end}}> Ignore flag changes</label>
                    <label><input type="checkbox" name="nophone" value="1" {{if .Filter.IgnorePhone}}checked{{end}}> Ignore phone changes</label>
                    <label><input type="checkbox" name="nospeed" value="1" {{if .Filter.IgnoreSpeed}}checked{{end}}> Ignore speed changes</label>
                    <label><input type="checkbox" name="nostatus" value="1" {{if .Filter.IgnoreStatus}}checked{{end}}> Ignore status changes</label>
                    <label><input type="checkbox" name="nolocation" value="1" {{if .Filter.IgnoreLocation}}checked{{end}}> Ignore location changes</label>
                    <label><input type="checkbox" name="noname" value="1" {{if .Filter.IgnoreName}}checked{{end}}> Ignore name changes</label>
                    <label><input type="checkbox" name="nosysop" value="1" {{if .Filter.IgnoreSysop}}checked{{end}}> Ignore sysop changes</label>
                    <label><input type="checkbox" name="noconnectivity" value="1" {{if .Filter.IgnoreConnectivity}}checked{{end}}> Ignore connectivity changes (Binkp/Telnet)</label>
                    <label><input type="checkbox" name="nomodemflags" value="1" {{if .Filter.IgnoreModemFlags}}checked{{end}}> Ignore modem flag changes</label>
                    <label><input type="checkbox" name="nointernetprotocols" value="1" {{if .Filter.IgnoreInternetProtocols}}checked{{end}}> Ignore internet protocol changes</label>
                    <label><input type="checkbox" name="nointernethostnames" value="1" {{if .Filter.IgnoreInternetHostnames}}checked{{end}}> Ignore internet hostname changes</label>
                    <label><input type="checkbox" name="nointernetports" value="1" {{if .Filter.IgnoreInternetPorts}}checked{{end}}> Ignore internet port changes</label>
                    <label><input type="checkbox" name="nointernetemails" value="1" {{if .Filter.IgnoreInternetEmails}}checked{{end}}> Ignore internet email changes</label>
                </div>
                <button type="submit">Apply Filters</button>
            </form>
            
            <h3>Change History</h3>
            <div class="timeline">
                {{range .Changes}}
                <div class="timeline-entry {{.ChangeType}}">
                    <div class="timeline-marker"></div>
                    <div class="timeline-date">
                        <strong>{{.Date.Format "Jan 2, 2006"}}</strong><br>
                        <small>nodelist.{{printf "%03d" .DayNumber}}</small>
                    </div>
                    <div class="timeline-content">
                        {{if eq .ChangeType "added"}}
                            <h4>✅ Node added to nodelist</h4>
                            {{if .NewNode}}
                            <div class="node-info">
                                <div class="info-item">
                                    <strong>System Name</strong>
                                    {{if .NewNode.SystemName}}{{.NewNode.SystemName}}{{else}}<em>-</em>{{end}}
                                </div>
                                <div class="info-item">
                                    <strong>Location</strong>
                                    {{if .NewNode.Location}}{{.NewNode.Location}}{{else}}<em>-</em>{{end}}
                                </div>
                                <div class="info-item">
                                    <strong>Sysop</strong>
                                    {{if .NewNode.SysopName}}{{.NewNode.SysopName}}{{else}}<em>-</em>{{end}}
                                </div>
                                <div class="info-item">
                                    <strong>Phone</strong>
                                    {{if .NewNode.Phone}}{{.NewNode.Phone}}{{else}}<em>-</em>{{end}}
                                </div>
                                <div class="info-item">
                                    <strong>Node Type</strong>
                                    {{if eq .NewNode.NodeType "Zone"}}<span class="badge badge-error">Zone</span>
                                    {{else if eq .NewNode.NodeType "Region"}}<span class="badge badge-warning">Region</span>
                                    {{else if eq .NewNode.NodeType "Host"}}<span class="badge badge-info">Host</span>
                                    {{else if eq .NewNode.NodeType "Hub"}}<span class="badge badge-success">Hub</span>
                                    {{else if eq .NewNode.NodeType "Pvt"}}<span class="badge badge-warning">Pvt</span>
                                    {{else if eq .NewNode.NodeType "Down"}}<span class="badge badge-error">Down</span>
                                    {{else if eq .NewNode.NodeType "Hold"}}<span class="badge badge-warning">Hold</span>
                                    {{else}}{{.NewNode.NodeType}}{{end}}
                                </div>
                                <div class="info-item">
                                    <strong>Max Speed</strong>
                                    {{if .NewNode.MaxSpeed}}{{.NewNode.MaxSpeed}}{{else}}<em>-</em>{{end}}
                                </div>
                                {{if .NewNode.Region}}
                                <div class="info-item">
                                    <strong>Region</strong>
                                    {{.NewNode.Region}}
                                </div>
                                {{end}}
                                <div class="info-item">
                                    <strong>Capabilities</strong>
                                    <div style="margin-top: 0.5rem;">
                                        {{if .NewNode.IsCM}}<span class="badge badge-success">CM</span>{{end}}
                                        {{if .NewNode.IsMO}}<span class="badge badge-success">MO</span>{{end}}
                                        {{if .NewNode.HasBinkp}}<span class="badge badge-info">Binkp</span>{{end}}
                                        {{if .NewNode.HasTelnet}}<span class="badge badge-info">Telnet</span>{{end}}
                                        {{if .NewNode.IsDown}}<span class="badge badge-error">Down</span>{{end}}
                                        {{if .NewNode.IsHold}}<span class="badge badge-warning">Hold</span>{{end}}
                                        {{if .NewNode.IsPvt}}<span class="badge badge-warning">Private</span>{{end}}
                                        {{if not (or .NewNode.IsCM .NewNode.IsMO .NewNode.HasBinkp .NewNode.HasTelnet .NewNode.IsDown .NewNode.IsHold .NewNode.IsPvt)}}<em>None specified</em>{{end}}
                                    </div>
                                </div>
                                {{if .NewNode.Flags}}
                                <div class="info-item" style="grid-column: span 2;">
                                    <strong>Flags</strong>
                                    <div style="margin-top: 0.5rem;">
                                        {{range .NewNode.Flags}}<span class="badge badge-info" style="margin-right: 0.25rem; margin-bottom: 0.25rem;">{{.}}</span>{{end}}
                                    </div>
                                </div>
                                {{end}}
                                {{if .NewNode.ModemFlags}}
                                <div class="info-item" style="grid-column: span 2;">
                                    <strong>Modem Flags</strong>
                                    <div style="margin-top: 0.5rem;">
                                        {{range .NewNode.ModemFlags}}<span class="badge badge-info" style="margin-right: 0.25rem; margin-bottom: 0.25rem;">{{.}}</span>{{end}}
                                    </div>
                                </div>
                                {{end}}
                                {{if .NewNode.InternetProtocols}}
                                <div class="info-item" style="grid-column: span 2;">
                                    <strong>Internet Protocols</strong>
                                    <div style="margin-top: 0.5rem;">
                                        {{range .NewNode.InternetProtocols}}<span class="badge badge-success" style="margin-right: 0.25rem; margin-bottom: 0.25rem;">{{.}}</span>{{end}}
                                    </div>
                                </div>
                                {{end}}
                                {{if .NewNode.InternetHostnames}}
                                <div class="info-item" style="grid-column: span 2;">
                                    <strong>Internet Hostnames</strong>
                                    <div style="margin-top: 0.5rem;">
                                        {{range .NewNode.InternetHostnames}}<code style="background: #f1f5f9; padding: 0.2rem 0.4rem; border-radius: 0.25rem; font-size: 0.9rem; margin-right: 0.5rem;">{{.}}</code>{{end}}
                                    </div>
                                </div>
                                {{end}}
                                {{if .NewNode.InternetPorts}}
                                <div class="info-item">
                                    <strong>Internet Ports</strong>
                                    <div style="margin-top: 0.5rem;">
                                        {{range .NewNode.InternetPorts}}<code style="background: #f1f5f9; padding: 0.2rem 0.4rem; border-radius: 0.25rem; font-size: 0.9rem; margin-right: 0.5rem;">{{.}}</code>{{end}}
                                    </div>
                                </div>
                                {{end}}
                                {{if .NewNode.InternetEmails}}
                                <div class="info-item" style="grid-column: span 2;">
                                    <strong>Internet Emails</strong>
                                    <div style="margin-top: 0.5rem;">
                                        {{range .NewNode.InternetEmails}}<code style="background: #f1f5f9; padding: 0.2rem 0.4rem; border-radius: 0.25rem; font-size: 0.9rem; margin-right: 0.5rem;">{{.}}</code>{{end}}
                                    </div>
                                </div>
                                {{end}}
                            </div>
                            {{end}}
                        {{else if eq .ChangeType "removed"}}
                            <h4>❌ Node removed from nodelist</h4>
                            <p style="color: var(--text-secondary);">Node was no longer listed in subsequent nodelists</p>
                        {{else if eq .ChangeType "modified"}}
                            <h4>📝 Node information changed</h4>
                            <div class="change-list">
                                {{range $field, $change := .Changes}}
                                <div class="change-item">
                                    <strong>
                                        {{if eq $field "binkp"}}🌐 Binkp Support
                                        {{else if eq $field "telnet"}}📡 Telnet Support
                                        {{else if eq $field "modem_flags"}}📞 Modem Flags
                                        {{else if eq $field "internet_protocols"}}🌐 Internet Protocols
                                        {{else if eq $field "internet_hostnames"}}🏠 Internet Hostnames
                                        {{else if eq $field "internet_ports"}}🔌 Internet Ports
                                        {{else if eq $field "internet_emails"}}📧 Internet Emails
                                        {{else if eq $field "status"}}📊 Status
                                        {{else if eq $field "name"}}💻 System Name
                                        {{else if eq $field "location"}}🌍 Location
                                        {{else if eq $field "sysop"}}👤 Sysop
                                        {{else if eq $field "phone"}}📞 Phone
                                        {{else if eq $field "speed"}}⚡ Speed
                                        {{else if eq $field "flags"}}🏷️ Flags
                                        {{else}}{{$field}}{{end}}:
                                    </strong>
                                    <span class="change-value">{{$change}}</span>
                                </div>
                                {{end}}
                            </div>
                        {{end}}
                    </div>
                </div>
                {{end}}
            </div>
            
            {{if not .Changes}}
                <p>No changes found with current filter settings.</p>
            {{end}}
        </div>
    </div>
</body>
</html>`

	case "api_help":
		return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{.Title}}</title>
    <link rel="stylesheet" href="/static/style.css">
</head>
<body>
    <div class="container">
        <header>
            <h1>{{.Title}}</h1>
            <p class="subtitle">REST API endpoints for programmatic access to nodelist data</p>
        </header>
        
        <nav>
            <div class="nav-container">
                <a href="/">🏠 Home</a>
                <a href="/search">🔍 Search Nodes</a>
                <a href="/search/sysop">👤 Search Sysops</a>
                <a href="/stats">📊 Statistics</a>
                <a href="/analytics">🔬 Analytics</a>
                <a href="/api/help" class="active">📖 API Help</a>
            </div>
        </nav>
        
        <div class="content">
            <div class="card">
                <h2 style="color: var(--text-primary); margin-bottom: 1.5rem;">🚀 Getting Started</h2>
                <p style="color: var(--text-secondary); margin-bottom: 2rem;">
                    The NodelistDB API provides RESTful access to FidoNet node data with JSON responses. 
                    All endpoints support standard HTTP methods and return consistent JSON structures.
                </p>
                
                <div class="alert alert-success">
                    <strong>Base URL:</strong> <code>http://localhost:8080/api/</code>
                </div>
            </div>

            <div class="card">
                <h2 style="color: var(--text-primary); margin-bottom: 1.5rem;">🔍 Search Endpoints</h2>
                
                <h3 style="color: var(--text-primary); margin-top: 2rem; margin-bottom: 1rem;">Search Nodes</h3>
                <div style="background: #f8fafc; padding: 1.5rem; border-radius: var(--radius); border-left: 4px solid var(--primary-color); margin-bottom: 1rem;">
                    <code style="color: var(--primary-color); font-weight: 600;">GET /api/nodes</code>
                </div>
                <p style="color: var(--text-secondary); margin-bottom: 1rem;">Search for nodes using various criteria. All parameters are optional.</p>
                
                <div style="background: #f1f5f9; padding: 1rem; border-radius: var(--radius); margin-bottom: 1rem;">
                    <strong>Query Parameters:</strong><br>
                    <code>zone</code> - Zone number (e.g., 1, 2, 3)<br>
                    <code>net</code> - Net number<br>
                    <code>node</code> - Node number<br>
                    <code>system_name</code> - System name (partial match)<br>
                    <code>location</code> - Location (partial match)<br>
                    <code>node_type</code> - Node type (Hub, Host, Zone, etc.)<br>
                    <code>is_active</code> - true/false for active nodes<br>
                    <code>is_cm</code> - true/false for CM nodes<br>
                    <code>date_from</code> - Start date (YYYY-MM-DD)<br>
                    <code>date_to</code> - End date (YYYY-MM-DD)<br>
                    <code>limit</code> - Results limit (default: 100, max: 200)<br>
                    <code>offset</code> - Results offset for pagination
                </div>
                
                <div style="background: #f8fafc; padding: 1rem; border-radius: var(--radius); margin-bottom: 2rem;">
                    <strong>Example:</strong><br>
                    <code>GET /api/nodes?zone=2&limit=10&is_cm=true</code>
                </div>

                <h3 style="color: var(--text-primary); margin-top: 2rem; margin-bottom: 1rem;">Search by Sysop</h3>
                <div style="background: #f8fafc; padding: 1.5rem; border-radius: var(--radius); border-left: 4px solid var(--primary-color); margin-bottom: 1rem;">
                    <code style="color: var(--primary-color); font-weight: 600;">GET /api/nodes/search/sysop</code>
                </div>
                <p style="color: var(--text-secondary); margin-bottom: 1rem;">Find all nodes operated by a specific sysop across all time periods.</p>
                
                <div style="background: #f1f5f9; padding: 1rem; border-radius: var(--radius); margin-bottom: 1rem;">
                    <strong>Query Parameters:</strong><br>
                    <code>name</code> - Sysop name (required)<br>
                    <code>limit</code> - Results limit (default: 50, max: 200)
                </div>
                
                <div style="background: #f8fafc; padding: 1rem; border-radius: var(--radius); margin-bottom: 2rem;">
                    <strong>Example:</strong><br>
                    <code>GET /api/nodes/search/sysop?name=John_Doe&limit=25</code>
                </div>
            </div>

            <div class="card">
                <h2 style="color: var(--text-primary); margin-bottom: 1.5rem;">🎯 Node Specific Endpoints</h2>
                
                <h3 style="color: var(--text-primary); margin-top: 2rem; margin-bottom: 1rem;">Get Node Information</h3>
                <div style="background: #f8fafc; padding: 1.5rem; border-radius: var(--radius); border-left: 4px solid var(--primary-color); margin-bottom: 1rem;">
                    <code style="color: var(--primary-color); font-weight: 600;">GET /api/nodes/{zone}/{net}/{node}</code>
                </div>
                <p style="color: var(--text-secondary); margin-bottom: 1rem;">Retrieve information for a specific node, including current and historical versions.</p>
                
                <div style="background: #f8fafc; padding: 1rem; border-radius: var(--radius); margin-bottom: 2rem;">
                    <strong>Example:</strong><br>
                    <code>GET /api/nodes/2/5001/100</code>
                </div>

                <h3 style="color: var(--text-primary); margin-top: 2rem; margin-bottom: 1rem;">Get Node History</h3>
                <div style="background: #f8fafc; padding: 1.5rem; border-radius: var(--radius); border-left: 4px solid var(--primary-color); margin-bottom: 1rem;">
                    <code style="color: var(--primary-color); font-weight: 600;">GET /api/nodes/{zone}/{net}/{node}/history</code>
                </div>
                <p style="color: var(--text-secondary); margin-bottom: 1rem;">Get complete historical records for a specific node.</p>
                
                <div style="background: #f8fafc; padding: 1rem; border-radius: var(--radius); margin-bottom: 2rem;">
                    <strong>Example:</strong><br>
                    <code>GET /api/nodes/2/5001/100/history</code>
                </div>

                <h3 style="color: var(--text-primary); margin-top: 2rem; margin-bottom: 1rem;">Get Node Changes</h3>
                <div style="background: #f8fafc; padding: 1.5rem; border-radius: var(--radius); border-left: 4px solid var(--primary-color); margin-bottom: 1rem;">
                    <code style="color: var(--primary-color); font-weight: 600;">GET /api/nodes/{zone}/{net}/{node}/changes</code>
                </div>
                <p style="color: var(--text-secondary); margin-bottom: 1rem;">Get detected changes and timeline events for a node. Supports filtering options.</p>
                
                <div style="background: #f1f5f9; padding: 1rem; border-radius: var(--radius); margin-bottom: 1rem;">
                    <strong>Filter Parameters:</strong><br>
                    <code>noflags=1</code> - Ignore flag changes<br>
                    <code>nophone=1</code> - Ignore phone changes<br>
                    <code>nospeed=1</code> - Ignore speed changes<br>
                    <code>nostatus=1</code> - Ignore status changes<br>
                    <code>nolocation=1</code> - Ignore location changes<br>
                    <code>noname=1</code> - Ignore name changes<br>
                    <code>nosysop=1</code> - Ignore sysop changes<br>
                    <code>noconnectivity=1</code> - Ignore connectivity changes<br>
                    <code>nointernetprotocols=1</code> - Ignore internet protocol changes<br>
                    <code>nointernethostnames=1</code> - Ignore hostname changes<br>
                    <code>nointernetports=1</code> - Ignore port changes<br>
                    <code>nointernetemails=1</code> - Ignore email changes<br>
                    <code>nomodemflags=1</code> - Ignore modem flag changes
                </div>
                
                <div style="background: #f8fafc; padding: 1rem; border-radius: var(--radius); margin-bottom: 2rem;">
                    <strong>Example:</strong><br>
                    <code>GET /api/nodes/2/5001/100/changes?noflags=1&nophone=1</code>
                </div>

                <h3 style="color: var(--text-primary); margin-top: 2rem; margin-bottom: 1rem;">Get Node Timeline</h3>
                <div style="background: #f8fafc; padding: 1.5rem; border-radius: var(--radius); border-left: 4px solid var(--primary-color); margin-bottom: 1rem;">
                    <code style="color: var(--primary-color); font-weight: 600;">GET /api/nodes/{zone}/{net}/{node}/timeline</code>
                </div>
                <p style="color: var(--text-secondary); margin-bottom: 1rem;">Get timeline data optimized for visualization, including activity periods and gaps.</p>
                
                <div style="background: #f8fafc; padding: 1rem; border-radius: var(--radius); margin-bottom: 2rem;">
                    <strong>Example:</strong><br>
                    <code>GET /api/nodes/2/5001/100/timeline</code>
                </div>
            </div>

            <div class="card">
                <h2 style="color: var(--text-primary); margin-bottom: 1.5rem;">📊 Statistics Endpoints</h2>
                
                <h3 style="color: var(--text-primary); margin-top: 2rem; margin-bottom: 1rem;">Network Statistics</h3>
                <div style="background: #f8fafc; padding: 1.5rem; border-radius: var(--radius); border-left: 4px solid var(--primary-color); margin-bottom: 1rem;">
                    <code style="color: var(--primary-color); font-weight: 600;">GET /api/stats</code>
                </div>
                <p style="color: var(--text-secondary); margin-bottom: 1rem;">Get comprehensive network statistics including node counts, zone distribution, and capabilities.</p>
                
                <div style="background: #f1f5f9; padding: 1rem; border-radius: var(--radius); margin-bottom: 1rem;">
                    <strong>Query Parameters:</strong><br>
                    <code>date</code> - Specific date for statistics (YYYY-MM-DD, defaults to today)
                </div>
                
                <div style="background: #f8fafc; padding: 1rem; border-radius: var(--radius); margin-bottom: 2rem;">
                    <strong>Example:</strong><br>
                    <code>GET /api/stats?date=2023-12-01</code>
                </div>
            </div>

            <div class="card">
                <h2 style="color: var(--text-primary); margin-bottom: 1.5rem;">🛠️ System Endpoints</h2>
                
                <h3 style="color: var(--text-primary); margin-top: 2rem; margin-bottom: 1rem;">Health Check</h3>
                <div style="background: #f8fafc; padding: 1.5rem; border-radius: var(--radius); border-left: 4px solid var(--primary-color); margin-bottom: 1rem;">
                    <code style="color: var(--primary-color); font-weight: 600;">GET /api/health</code>
                </div>
                <p style="color: var(--text-secondary); margin-bottom: 1rem;">Check API service status and uptime.</p>
                
                <div style="background: #f8fafc; padding: 1rem; border-radius: var(--radius); margin-bottom: 2rem;">
                    <strong>Example Response:</strong><br>
                    <code>{"status": "ok", "time": "2023-12-01T12:00:00Z"}</code>
                </div>
            </div>

            <div class="card">
                <h2 style="color: var(--text-primary); margin-bottom: 1.5rem;">💡 Usage Examples</h2>
                
                <h3 style="color: var(--text-primary); margin-bottom: 1rem;">Using curl</h3>
                <div style="background: #1e293b; color: #e2e8f0; padding: 1.5rem; border-radius: var(--radius); margin-bottom: 1rem; font-family: monospace; overflow-x: auto;">
# Search for nodes in Zone 2<br>
curl "http://localhost:8080/api/nodes?zone=2&limit=5"<br><br>

# Get specific node information<br>
curl "http://localhost:8080/api/nodes/2/5001/100"<br><br>

# Search by sysop name<br>
curl "http://localhost:8080/api/nodes/search/sysop?name=John_Doe"<br><br>

# Get network statistics<br>
curl "http://localhost:8080/api/stats"
                </div>

                <h3 style="color: var(--text-primary); margin-bottom: 1rem;">Response Format</h3>
                <p style="color: var(--text-secondary); margin-bottom: 1rem;">All API responses use JSON format with consistent structure:</p>
                <div style="background: #1e293b; color: #e2e8f0; padding: 1.5rem; border-radius: var(--radius); margin-bottom: 2rem; font-family: monospace; overflow-x: auto;">
{<br>
&nbsp;&nbsp;"nodes": [...],<br>
&nbsp;&nbsp;"count": 42,<br>
&nbsp;&nbsp;"filter": {...}<br>
}
                </div>
            </div>

            <div class="alert alert-success">
                <strong>💡 Pro Tip:</strong> Use the <code>limit</code> and <code>offset</code> parameters for efficient pagination when dealing with large result sets. The API performs well with limits up to 200 records per request.
            </div>
        </div>
    </div>
</body>
</html>`

	case "analytics":
		return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{.Title}}</title>
    <link rel="stylesheet" href="/static/style.css">
</head>
<body>
    <div class="container">
        <header>
            <h1>{{.Title}}</h1>
            <p class="subtitle">Advanced FidoNet historical analysis and reporting</p>
        </header>
        
        <nav>
            <div class="nav-container">
                <a href="/">🏠 Home</a>
                <a href="/search">🔍 Search Nodes</a>
                <a href="/search/sysop">👤 Search Sysops</a>
                <a href="/stats">📊 Statistics</a>
                <a href="/analytics" class="active">🔬 Analytics</a>
                <a href="/api/help">📖 API Help</a>
            </div>
        </nav>
        
        <div class="content">
            <div class="card">
                <h2>🔬 FidoNet Historical Analytics</h2>
                <p>Explore comprehensive analytical reports about FidoNet's historical evolution, technology adoption, and network patterns.</p>
            </div>

            <div class="analytics-grid">
                <div class="analytics-card">
                    <h3>📡 Technology Evolution</h3>
                    <div class="analytics-links">
                        <a href="/analytics/v34" class="btn btn-primary">V.34 Modem Analysis</a>
                        <a href="/analytics/binkp" class="btn btn-primary">Binkp Protocol Analysis</a>
                        <a href="/analytics/trends?protocol=V34" class="btn btn-secondary">Protocol Trends</a>
                    </div>
                    <p>Analyze when new technologies first appeared in FidoNet and their adoption patterns over time.</p>
                </div>

                <div class="analytics-card">
                    <h3>🌐 Network Lifecycle</h3>
                    <div class="analytics-links">
                        <form method="GET" action="/analytics/network" style="margin-bottom: 1rem;">
                            <input type="number" name="zone" placeholder="Zone" min="1" max="6" style="width: 80px; margin-right: 0.5rem;">
                            <input type="number" name="net" placeholder="Net" min="1" style="width: 100px; margin-right: 0.5rem;">
                            <button type="submit" class="btn btn-primary">Analyze Network</button>
                        </form>
                    </div>
                    <p>Track network creation, evolution, and deletion patterns across FidoNet zones.</p>
                </div>

                <div class="analytics-card">
                    <h3>👤 Social Analysis</h3>
                    <div class="analytics-links">
                        <form method="GET" action="/analytics/sysops" style="margin-bottom: 1rem;">
                            <input type="number" name="year" placeholder="Year (e.g., 1995)" min="1980" max="2025" style="width: 120px; margin-right: 0.5rem;">
                            <button type="submit" class="btn btn-primary">Analyze Year</button>
                        </form>
                        <a href="/analytics/sysops" class="btn btn-secondary">Current Year</a>
                    </div>
                    <p>Discover the most common sysop names and social patterns in FidoNet communities.</p>
                </div>

                <div class="analytics-card">
                    <h3>📈 Coming Soon</h3>
                    <div class="analytics-links">
                        <span class="btn btn-disabled">Geographic Analysis</span>
                        <span class="btn btn-disabled">Speed Evolution</span>
                        <span class="btn btn-disabled">Zone Comparisons</span>
                    </div>
                    <p>Additional analytical reports are in development. Check back for updates!</p>
                </div>
            </div>

            <div class="card" style="margin-top: 2rem;">
                <h3>📊 About These Analytics</h3>
                <p>All analytical reports are generated from historical FidoNet nodelist data spanning decades of network evolution. 
                These tools help researchers, historians, and network enthusiasts understand the technological and social patterns 
                that shaped one of the world's largest store-and-forward networks.</p>
                
                <div style="margin-top: 1rem;">
                    <strong>Features:</strong>
                    <ul style="margin-left: 1.5rem; margin-top: 0.5rem;">
                        <li>🎯 <strong>Precise Analysis</strong> - Find exact dates when technologies first appeared</li>
                        <li>📈 <strong>Trend Visualization</strong> - Chart data ready for graphing tools</li>
                        <li>🔍 <strong>Deep Queries</strong> - Complex analytical SQL queries on historical data</li>
                        <li>⚡ <strong>Fast Results</strong> - Optimized DuckDB queries for quick insights</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
    <script src="/static/app.js"></script>
</body>
</html>`

	case "v34_analytics":
		return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{.Title}}</title>
    <link rel="stylesheet" href="/static/style.css">
</head>
<body>
    <div class="container">
        <header>
            <h1>{{.Title}}</h1>
            <p class="subtitle">Analysis of V.34 modem adoption in FidoNet</p>
        </header>
        
        <nav>
            <div class="nav-container">
                <a href="/">🏠 Home</a>
                <a href="/search">🔍 Search Nodes</a>
                <a href="/search/sysop">👤 Search Sysops</a>
                <a href="/stats">📊 Statistics</a>
                <a href="/analytics" class="active">🔬 Analytics</a>
                <a href="/api/help">📖 API Help</a>
            </div>
        </nav>
        
        <div class="content">
            <div style="margin-bottom: 1rem;">
                <a href="/analytics" class="btn btn-secondary">← Back to Analytics</a>
            </div>

            {{if .Error}}
                <div class="alert alert-error">
                    <strong>Error:</strong> {{.Error}}
                </div>
            {{else if .Report}}
                <div class="card">
                    <h2>📡 V.34 Modem Analysis Results</h2>
                    <p><em>Query completed in {{.QueryTime}}</em></p>
                    
                    <div class="stats-grid">
                        <div class="stat-card">
                            <h3>{{.Report.FirstAppearance.Format "January 2, 2006"}}</h3>
                            <p>First V.34 Appearance</p>
                        </div>
                        
                        <div class="stat-card">
                            <h3>{{.Report.FirstNode.Address}}</h3>
                            <p>First V.34 Node</p>
                        </div>
                        
                        <div class="stat-card">
                            <h3>{{.Report.TotalV34Nodes}}</h3>
                            <p>Total V.34 Adoptions</p>
                        </div>
                    </div>
                </div>

                <div class="card">
                    <h3>🎯 First V.34 Node Details</h3>
                    <table class="data-table">
                        <tr><td><strong>Address:</strong></td><td>{{.Report.FirstNode.Address}}</td></tr>
                        <tr><td><strong>System Name:</strong></td><td>{{if .Report.FirstNode.SystemName}}{{.Report.FirstNode.SystemName}}{{else}}<em>Not specified</em>{{end}}</td></tr>
                        <tr><td><strong>Sysop Name:</strong></td><td>{{if .Report.FirstNode.SysopName}}{{.Report.FirstNode.SysopName}}{{else}}<em>Not specified</em>{{end}}</td></tr>
                        <tr><td><strong>Location:</strong></td><td>{{if .Report.FirstNode.Location}}{{.Report.FirstNode.Location}}{{else}}<em>Not specified</em>{{end}}</td></tr>
                        <tr><td><strong>First Seen:</strong></td><td>{{.Report.FirstAppearance.Format "January 2, 2006"}}</td></tr>
                    </table>
                </div>

                <div class="card">
                    <h3>📈 V.34 Adoption by Year</h3>
                    <div class="table-container">
                        <table class="data-table">
                            <thead>
                                <tr>
                                    <th>Year</th>
                                    <th>V.34 Nodes</th>
                                    <th>Adoption</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{range .Report.AdoptionByYear}}
                                <tr>
                                    <td>{{.Year}}</td>
                                    <td>{{.Count}}</td>
                                    <td><div class="progress-bar" style="width: {{printf "%.1f" (mul (div (float64 .Count) (float64 $.Report.TotalV34Nodes)) 100)}}%;"></div></td>
                                </tr>
                                {{end}}
                            </tbody>
                        </table>
                    </div>
                </div>

                {{if .Report.ChartData}}
                <div class="card">
                    <h3>📊 Chart Data (JSON)</h3>
                    <details>
                        <summary>Click to view chart data for visualization tools</summary>
                        <pre style="background: #f5f5f5; padding: 1rem; margin-top: 1rem; overflow-x: auto; font-size: 0.9rem;">{{json .Report.ChartData}}</pre>
                    </details>
                </div>
                {{end}}
            {{end}}
        </div>
    </div>
    <script src="/static/app.js"></script>
</body>
</html>`

	case "binkp_analytics":
		return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{.Title}}</title>
    <link rel="stylesheet" href="/static/style.css">
</head>
<body>
    <div class="container">
        <header>
            <h1>{{.Title}}</h1>
            <p class="subtitle">Analysis of Binkp protocol adoption in FidoNet</p>
        </header>
        
        <nav>
            <div class="nav-container">
                <a href="/">🏠 Home</a>
                <a href="/search">🔍 Search Nodes</a>
                <a href="/search/sysop">👤 Search Sysops</a>
                <a href="/stats">📊 Statistics</a>
                <a href="/analytics" class="active">🔬 Analytics</a>
                <a href="/api/help">📖 API Help</a>
            </div>
        </nav>
        
        <div class="content">
            <div style="margin-bottom: 1rem;">
                <a href="/analytics" class="btn btn-secondary">← Back to Analytics</a>
            </div>

            {{if .Error}}
                <div class="alert alert-error">
                    <strong>Error:</strong> {{.Error}}
                </div>
            {{else if .Report}}
                <div class="card">
                    <h2>🌐 Binkp Protocol Analysis Results</h2>
                    <p><em>Query completed in {{.QueryTime}}</em></p>
                    
                    <div class="stats-grid">
                        <div class="stat-card">
                            <h3>{{.Report.FirstAppearance.Format "January 2, 2006"}}</h3>
                            <p>First Binkp Appearance</p>
                        </div>
                        
                        <div class="stat-card">
                            <h3>{{.Report.FirstNode.Address}}</h3>
                            <p>First Binkp Node</p>
                        </div>
                        
                        <div class="stat-card">
                            <h3>{{.Report.TotalBinkpNodes}}</h3>
                            <p>Total Binkp Adoptions</p>
                        </div>
                    </div>
                </div>

                <div class="card">
                    <h3>🎯 First Binkp Node Details</h3>
                    <table class="data-table">
                        <tr><td><strong>Address:</strong></td><td>{{.Report.FirstNode.Address}}</td></tr>
                        <tr><td><strong>System Name:</strong></td><td>{{if .Report.FirstNode.SystemName}}{{.Report.FirstNode.SystemName}}{{else}}<em>Not specified</em>{{end}}</td></tr>
                        <tr><td><strong>Sysop Name:</strong></td><td>{{if .Report.FirstNode.SysopName}}{{.Report.FirstNode.SysopName}}{{else}}<em>Not specified</em>{{end}}</td></tr>
                        <tr><td><strong>Location:</strong></td><td>{{if .Report.FirstNode.Location}}{{.Report.FirstNode.Location}}{{else}}<em>Not specified</em>{{end}}</td></tr>
                        <tr><td><strong>First Seen:</strong></td><td>{{.Report.FirstAppearance.Format "January 2, 2006"}}</td></tr>
                    </table>
                </div>

                <div class="card">
                    <h3>📈 Binkp Adoption by Year</h3>
                    <div class="table-container">
                        <table class="data-table">
                            <thead>
                                <tr>
                                    <th>Year</th>
                                    <th>Binkp Nodes</th>
                                    <th>Adoption</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{range .Report.AdoptionByYear}}
                                <tr>
                                    <td>{{.Year}}</td>
                                    <td>{{.Count}}</td>
                                    <td><div class="progress-bar" style="width: {{printf "%.1f" (mul (div (float64 .Count) (float64 $.Report.TotalBinkpNodes)) 100)}}%;"></div></td>
                                </tr>
                                {{end}}
                            </tbody>
                        </table>
                    </div>
                </div>

                {{if .Report.ChartData}}
                <div class="card">
                    <h3>📊 Chart Data (JSON)</h3>
                    <details>
                        <summary>Click to view chart data for visualization tools</summary>
                        <pre style="background: #f5f5f5; padding: 1rem; margin-top: 1rem; overflow-x: auto; font-size: 0.9rem;">{{json .Report.ChartData}}</pre>
                    </details>
                </div>
                {{end}}
            {{end}}
        </div>
    </div>
    <script src="/static/app.js"></script>
</body>
</html>`

	case "sysop_analytics":
		return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{.Title}}</title>
    <link rel="stylesheet" href="/static/style.css">
</head>
<body>
    <div class="container">
        <header>
            <h1>{{.Title}}</h1>
            <p class="subtitle">Analysis of sysop names in FidoNet</p>
        </header>
        
        <nav>
            <div class="nav-container">
                <a href="/">🏠 Home</a>
                <a href="/search">🔍 Search Nodes</a>
                <a href="/search/sysop">👤 Search Sysops</a>
                <a href="/stats">📊 Statistics</a>
                <a href="/analytics" class="active">🔬 Analytics</a>
                <a href="/api/help">📖 API Help</a>
            </div>
        </nav>
        
        <div class="content">
            <div style="margin-bottom: 1rem;">
                <a href="/analytics" class="btn btn-secondary">← Back to Analytics</a>
            </div>

            {{if .Error}}
                <div class="alert alert-error">
                    <strong>Error:</strong> {{.Error}}
                </div>
            {{else if .Report}}
                <div class="card">
                    <h2>👤 Sysop Name Analysis for {{.Report.Year}}</h2>
                    <p><em>Query completed in {{.QueryTime}}</em></p>
                    
                    <div class="stats-grid">
                        <div class="stat-card">
                            <h3>{{.Report.Year}}</h3>
                            <p>Analysis Year</p>
                        </div>
                        
                        <div class="stat-card">
                            <h3>{{.Report.TotalUnique}}</h3>
                            <p>Unique Sysop Names</p>
                        </div>
                        
                        <div class="stat-card">
                            <h3>{{.Report.TotalNodes}}</h3>
                            <p>Total Nodes</p>
                        </div>
                    </div>
                </div>

                <div class="card">
                    <h3>🏆 Most Common Sysop Names in {{.Report.Year}}</h3>
                    <div class="table-container">
                        <table class="data-table">
                            <thead>
                                <tr>
                                    <th>Rank</th>
                                    <th>Sysop Name</th>
                                    <th>Node Count</th>
                                    <th>Frequency</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{range $i, $name := .Report.TopNames}}
                                <tr>
                                    <td>{{add $i 1}}</td>
                                    <td><strong>{{$name.Name}}</strong></td>
                                    <td>{{$name.Count}}</td>
                                    <td><div class="progress-bar" style="width: {{printf "%.1f" (mul (div (float64 $name.Count) (float64 (index $.Report.TopNames 0).Count)) 100)}}%;"></div></td>
                                </tr>
                                {{end}}
                            </tbody>
                        </table>
                    </div>
                </div>

                {{if .Report.ChartData}}
                <div class="card">
                    <h3>📊 Chart Data (JSON)</h3>
                    <details>
                        <summary>Click to view chart data for visualization tools</summary>
                        <pre style="background: #f5f5f5; padding: 1rem; margin-top: 1rem; overflow-x: auto; font-size: 0.9rem;">{{json .Report.ChartData}}</pre>
                    </details>
                </div>
                {{end}}
            {{end}}
        </div>
    </div>
    <script src="/static/app.js"></script>
</body>
</html>`

	case "network_lifecycle":
		return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{.Title}}</title>
    <link rel="stylesheet" href="/static/style.css">
</head>
<body>
    <div class="container">
        <header>
            <h1>{{.Title}}</h1>
            <p class="subtitle">Network lifecycle and evolution analysis</p>
        </header>
        
        <nav>
            <div class="nav-container">
                <a href="/">🏠 Home</a>
                <a href="/search">🔍 Search Nodes</a>
                <a href="/search/sysop">👤 Search Sysops</a>
                <a href="/stats">📊 Statistics</a>
                <a href="/analytics" class="active">🔬 Analytics</a>
                <a href="/api/help">📖 API Help</a>
            </div>
        </nav>
        
        <div class="content">
            <div style="margin-bottom: 1rem;">
                <a href="/analytics" class="btn btn-secondary">← Back to Analytics</a>
            </div>

            {{if .Error}}
                <div class="alert alert-error">
                    <strong>Error:</strong> {{.Error}}
                </div>
            {{else if .Report}}
                <div class="card">
                    <h2>🌐 Network {{.Report.Zone}}:{{.Report.Net}} Lifecycle Analysis</h2>
                    <p><em>Query completed in {{.QueryTime}}</em></p>
                    
                    <div class="stats-grid">
                        <div class="stat-card">
                            <h3>{{.Report.FirstSeen.Format "Jan 2006"}}</h3>
                            <p>First Seen</p>
                        </div>
                        
                        <div class="stat-card">
                            <h3>{{if .Report.IsActive}}Active{{else}}{{.Report.LastSeen.Format "Jan 2006"}}{{end}}</h3>
                            <p>{{if .Report.IsActive}}Status{{else}}Last Seen{{end}}</p>
                        </div>
                        
                        <div class="stat-card">
                            <h3>{{.Report.MaxNodes}}</h3>
                            <p>Peak Node Count</p>
                        </div>
                        
                        <div class="stat-card">
                            <h3>{{.Report.Duration}}</h3>
                            <p>Duration</p>
                        </div>
                    </div>
                </div>

                <div class="card">
                    <h3>📋 Network Details</h3>
                    <table class="data-table">
                        <tr><td><strong>Network:</strong></td><td>{{.Report.Zone}}:{{.Report.Net}}</td></tr>
                        <tr><td><strong>Host Name:</strong></td><td>{{if .Report.HostName}}{{.Report.HostName}}{{else}}<em>Not specified</em>{{end}}</td></tr>
                        <tr><td><strong>First Seen:</strong></td><td>{{.Report.FirstSeen.Format "January 2, 2006"}}</td></tr>
                        <tr><td><strong>Last Seen:</strong></td><td>{{.Report.LastSeen.Format "January 2, 2006"}}</td></tr>
                        <tr><td><strong>Status:</strong></td><td>{{if .Report.IsActive}}<span class="badge badge-success">Active</span>{{else}}<span class="badge badge-error">Inactive</span>{{end}}</td></tr>
                        <tr><td><strong>Peak Nodes:</strong></td><td>{{.Report.MaxNodes}}</td></tr>
                        <tr><td><strong>Total History Points:</strong></td><td>{{len .Report.NodeHistory}}</td></tr>
                    </table>
                </div>

                {{if .Report.NodeHistory}}
                <div class="card">
                    <h3>📈 Node Count History</h3>
                    <div class="table-container" style="max-height: 400px; overflow-y: auto;">
                        <table class="data-table">
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>Node Count</th>
                                    <th>Relative Size</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{range .Report.NodeHistory}}
                                <tr>
                                    <td>{{.Date.Format "2006-01-02"}}</td>
                                    <td>{{.NodeCount}}</td>
                                    <td><div class="progress-bar" style="width: {{printf "%.1f" (mul (div (float64 .NodeCount) (float64 $.Report.MaxNodes)) 100)}}%;"></div></td>
                                </tr>
                                {{end}}
                            </tbody>
                        </table>
                    </div>
                </div>
                {{end}}

                {{if .Report.ChartData}}
                <div class="card">
                    <h3>📊 Chart Data (JSON)</h3>
                    <details>
                        <summary>Click to view chart data for visualization tools</summary>
                        <pre style="background: #f5f5f5; padding: 1rem; margin-top: 1rem; overflow-x: auto; font-size: 0.9rem;">{{json .Report.ChartData}}</pre>
                    </details>
                </div>
                {{end}}
            {{end}}
        </div>
    </div>
    <script src="/static/app.js"></script>
</body>
</html>`

	default:
		return "<html><body><h1>Template not found</h1></body></html>"
	}
}

func (s *Server) getCSS() string {
	return `
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

:root {
    --primary-color: #2563eb;
    --primary-hover: #1d4ed8;
    --secondary-color: #64748b;
    --success-color: #10b981;
    --warning-color: #f59e0b;
    --error-color: #ef4444;
    --background: #f8fafc;
    --card-bg: #ffffff;
    --text-primary: #1e293b;
    --text-secondary: #64748b;
    --border-color: #e2e8f0;
    --shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
    --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
    --radius: 0.5rem;
    --radius-lg: 0.75rem;
}

* {
    box-sizing: border-box;
}

body {
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    margin: 0;
    padding: 0;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
    color: var(--text-primary);
    line-height: 1.6;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
    background: var(--card-bg);
    border-radius: var(--radius-lg);
    box-shadow: var(--shadow-lg);
    margin-top: 2rem;
    margin-bottom: 2rem;
}

header {
    text-align: center;
    margin-bottom: 3rem;
    padding-bottom: 2rem;
    border-bottom: 2px solid var(--border-color);
}

h1 {
    font-size: 2.5rem;
    font-weight: 700;
    background: linear-gradient(135deg, var(--primary-color), #9333ea);
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    margin: 0 0 0.5rem 0;
}

.subtitle {
    font-size: 1.1rem;
    color: var(--text-secondary);
    font-weight: 400;
}

nav {
    background: var(--card-bg);
    padding: 1rem 0;
    margin-bottom: 2rem;
    border-radius: var(--radius);
    box-shadow: var(--shadow);
    border: 1px solid var(--border-color);
}

.nav-container {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    gap: 0.5rem;
}

nav a {
    display: inline-flex;
    align-items: center;
    padding: 0.75rem 1.5rem;
    color: var(--text-secondary);
    text-decoration: none;
    border-radius: var(--radius);
    font-weight: 500;
    transition: all 0.2s ease;
    border: 1px solid transparent;
}

nav a:hover {
    background: var(--primary-color);
    color: white;
    transform: translateY(-1px);
    box-shadow: var(--shadow);
}

nav a.active {
    background: var(--primary-color);
    color: white;
    box-shadow: var(--shadow);
}

.content {
    margin-top: 2rem;
}

.card {
    background: var(--card-bg);
    border-radius: var(--radius-lg);
    padding: 2rem;
    box-shadow: var(--shadow);
    border: 1px solid var(--border-color);
    margin-bottom: 2rem;
}

.search-form {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
}

.form-group {
    display: flex;
    flex-direction: column;
}

.form-group label {
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: var(--text-primary);
    font-size: 0.9rem;
}

.form-group input {
    padding: 0.75rem 1rem;
    border: 2px solid var(--border-color);
    border-radius: var(--radius);
    font-size: 1rem;
    transition: all 0.2s ease;
    background: var(--card-bg);
}

.form-group input:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgb(37 99 235 / 0.1);
}

.form-group select {
    padding: 0.75rem 1rem;
    border: 2px solid var(--border-color);
    border-radius: var(--radius);
    font-size: 1rem;
    transition: all 0.2s ease;
    background: var(--card-bg);
    width: 100%;
    cursor: pointer;
}

.form-group select:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgb(37 99 235 / 0.1);
}

.btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 0.75rem 1.5rem;
    background: var(--primary-color);
    color: white;
    border: none;
    border-radius: var(--radius);
    font-weight: 600;
    font-size: 1rem;
    cursor: pointer;
    transition: all 0.2s ease;
    text-decoration: none;
    gap: 0.5rem;
}

.btn:hover {
    background: var(--primary-hover);
    transform: translateY(-1px);
    box-shadow: var(--shadow);
}

.btn-secondary {
    background: var(--secondary-color);
}

.btn-secondary:hover {
    background: #475569;
}

.btn-success {
    background: var(--success-color);
}

.btn-success:hover {
    background: #059669;
}

.table-container {
    background: var(--card-bg);
    border-radius: var(--radius-lg);
    overflow: hidden;
    box-shadow: var(--shadow);
    border: 1px solid var(--border-color);
    margin: 2rem 0;
}

table {
    width: 100%;
    border-collapse: collapse;
}

table th {
    background: linear-gradient(135deg, #f1f5f9, #e2e8f0);
    padding: 1rem;
    text-align: left;
    font-weight: 600;
    color: var(--text-primary);
    border-bottom: 2px solid var(--border-color);
}

table td {
    padding: 1rem;
    border-bottom: 1px solid var(--border-color);
    vertical-align: top;
}

table tr:hover {
    background: #f8fafc;
}

table a {
    color: var(--primary-color);
    text-decoration: none;
    font-weight: 500;
}

table a:hover {
    text-decoration: underline;
}

.stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
    margin: 2rem 0;
}

.stat-card {
    background: linear-gradient(135deg, var(--card-bg), #f8fafc);
    padding: 2rem;
    border-radius: var(--radius-lg);
    text-align: center;
    box-shadow: var(--shadow);
    border: 1px solid var(--border-color);
    transition: all 0.2s ease;
}

.stat-card:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg);
}

.stat-card h3 {
    font-size: 2.5rem;
    font-weight: 700;
    margin: 0;
    color: var(--primary-color);
}

.stat-card p {
    margin: 0.5rem 0 0 0;
    color: var(--text-secondary);
    font-weight: 500;
    text-transform: uppercase;
    font-size: 0.85rem;
    letter-spacing: 0.05em;
}

.alert {
    padding: 1rem 1.5rem;
    border-radius: var(--radius);
    margin: 1rem 0;
    border-left: 4px solid;
}

.alert-error {
    background: #fef2f2;
    color: #991b1b;
    border-left-color: var(--error-color);
}

.alert-success {
    background: #f0fdf4;
    color: #166534;
    border-left-color: var(--success-color);
}

.filter-panel {
    background: #f8fafc;
    padding: 1.5rem;
    border-radius: var(--radius);
    border: 1px solid var(--border-color);
    margin: 2rem 0;
}

.filter-options {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    margin: 1rem 0;
}

.filter-options label {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    font-weight: 400;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: var(--radius);
    transition: background 0.2s ease;
}

.filter-options label:hover {
    background: white;
}

.filter-options input[type="checkbox"] {
    width: 1.2rem;
    height: 1.2rem;
    accent-color: var(--primary-color);
}

.timeline {
    margin: 2rem 0;
    position: relative;
}

.timeline::before {
    content: '';
    position: absolute;
    left: 2rem;
    top: 0;
    bottom: 0;
    width: 2px;
    background: linear-gradient(to bottom, var(--primary-color), transparent);
}

.timeline-entry {
    display: flex;
    margin-bottom: 2rem;
    position: relative;
    align-items: flex-start;
}

.timeline-marker {
    flex: 0 0 4rem;
    height: 4rem;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
}

.timeline-marker::after {
    content: '';
    width: 1rem;
    height: 1rem;
    border-radius: 50%;
    background: var(--primary-color);
    border: 3px solid white;
    box-shadow: var(--shadow);
    z-index: 2;
}

.timeline-entry.added .timeline-marker::after {
    background: var(--success-color);
}

.timeline-entry.removed .timeline-marker::after {
    background: var(--error-color);
}

.timeline-entry.modified .timeline-marker::after {
    background: var(--warning-color);
}

.timeline-date {
    flex: 0 0 140px;
    text-align: right;
    padding-right: 1.5rem;
    font-size: 0.9rem;
    color: var(--text-secondary);
    font-weight: 500;
}

.timeline-content {
    flex: 1;
    background: var(--card-bg);
    padding: 1.5rem;
    border-radius: var(--radius-lg);
    box-shadow: var(--shadow);
    border: 1px solid var(--border-color);
    margin-left: 1rem;
}

.timeline-content h4 {
    margin: 0 0 1rem 0;
    font-weight: 600;
    color: var(--text-primary);
}

.timeline-content ul {
    margin: 0;
    padding-left: 1.5rem;
}

.timeline-content li {
    margin: 0.5rem 0;
    color: var(--text-secondary);
}

.change-list {
    margin: 1rem 0;
}

.change-item {
    margin: 0.75rem 0;
    padding: 0.5rem 0;
    border-bottom: 1px solid #f1f5f9;
}

.change-item:last-child {
    border-bottom: none;
}

.change-value {
    color: var(--text-secondary);
    font-family: monospace;
    background: #f8fafc;
    padding: 0.2rem 0.4rem;
    border-radius: 0.25rem;
    margin-left: 0.5rem;
}

.added .timeline-content {
    border-left: 4px solid var(--success-color);
}

.removed .timeline-content {
    border-left: 4px solid var(--error-color);
}

.modified .timeline-content {
    border-left: 4px solid var(--warning-color);
}

.node-info {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    margin: 2rem 0;
}

.info-item {
    background: #f8fafc;
    padding: 1rem;
    border-radius: var(--radius);
    border: 1px solid var(--border-color);
}

.info-item strong {
    display: block;
    color: var(--text-primary);
    font-weight: 600;
    margin-bottom: 0.25rem;
}

@media (max-width: 768px) {
    .container {
        margin: 1rem;
        padding: 1rem;
        border-radius: var(--radius);
    }
    
    .nav-container {
        flex-direction: column;
    }
    
    .search-form {
        grid-template-columns: 1fr;
    }
    
    .stats-grid {
        grid-template-columns: 1fr;
    }
    
    .timeline-entry {
        flex-direction: column;
        align-items: flex-start;
    }
    
    .timeline-date {
        flex: none;
        text-align: left;
        padding: 0 0 0.5rem 0;
    }
    
    .timeline-content {
        margin-left: 0;
        width: 100%;
    }
}

.loading {
    display: inline-block;
    width: 1.2rem;
    height: 1.2rem;
    border: 2px solid #f3f3f3;
    border-top: 2px solid var(--primary-color);
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.badge {
    display: inline-block;
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
    font-weight: 500;
    border-radius: 9999px;
    text-transform: uppercase;
    letter-spacing: 0.025em;
}

.badge-success {
    background: #dcfce7;
    color: #166534;
}

.badge-error {
    background: #fee2e2;
    color: #991b1b;
}

.badge-warning {
    background: #fef3c7;
    color: #92400e;
}

.badge-info {
    background: #dbeafe;
    color: #1e40af;
}
/* Analytics Styles */
.analytics-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
    margin: 2rem 0;
}

.analytics-card {
    background: var(--card-bg);
    border-radius: var(--radius);
    padding: 2rem;
    box-shadow: var(--shadow);
    border: 1px solid var(--border-color);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.analytics-card:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg);
}

.analytics-card h3 {
    margin-top: 0;
    margin-bottom: 1rem;
    color: var(--primary-color);
    font-weight: 600;
}

.analytics-links {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    margin-bottom: 1rem;
}

.analytics-links .btn {
    text-align: center;
}

.analytics-links form {
    display: flex;
    gap: 0.5rem;
    align-items: center;
    flex-wrap: wrap;
}

.analytics-links input {
    padding: 0.5rem;
    border: 1px solid var(--border-color);
    border-radius: var(--radius);
    font-size: 0.9rem;
}

.btn-disabled {
    background: var(--secondary-color) !important;
    color: white;
    cursor: not-allowed;
    opacity: 0.6;
}

.btn-disabled:hover {
    background: var(--secondary-color) !important;
    transform: none;
}

.progress-bar {
    height: 20px;
    background: linear-gradient(90deg, var(--primary-color), var(--primary-hover));
    border-radius: var(--radius);
    min-width: 2px;
    transition: width 0.3s ease;
}

.data-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 1rem;
}

.data-table th,
.data-table td {
    padding: 0.75rem;
    text-align: left;
    border-bottom: 1px solid var(--border-color);
}

.data-table th {
    background: var(--background);
    font-weight: 600;
    color: var(--text-primary);
}

.data-table tr:hover {
    background: var(--background);
}

.data-table td:last-child {
    width: 200px;
}

details {
    margin-top: 1rem;
}

details summary {
    cursor: pointer;
    padding: 0.5rem;
    background: var(--background);
    border-radius: var(--radius);
    font-weight: 500;
}

details[open] summary {
    margin-bottom: 1rem;
}

pre {
    white-space: pre-wrap;
    word-wrap: break-word;
    max-height: 400px;
    overflow-y: auto;
}

/* Responsive adjustments */
@media (max-width: 768px) {
    .analytics-grid {
        grid-template-columns: 1fr;
    }
    
    .analytics-links form {
        flex-direction: column;
        align-items: stretch;
    }
    
    .analytics-links input {
        width: 100%;
    }
    
    .data-table {
        font-size: 0.9rem;
    }
    
    .data-table th,
    .data-table td {
        padding: 0.5rem;
    }
}
`
}

func (s *Server) getJS() string {
	return `
// Simple JavaScript for form enhancements
document.addEventListener('DOMContentLoaded', function() {
    // Auto-focus first input on search page
    const firstInput = document.querySelector('input[type="number"], input[type="text"]');
    if (firstInput) {
        firstInput.focus();
    }
    
    // Handle full address input
    const fullAddressInput = document.getElementById('full_address');
    const zoneInput = document.getElementById('zone');
    const netInput = document.getElementById('net');
    const nodeInput = document.getElementById('node');
    
    if (fullAddressInput) {
        fullAddressInput.addEventListener('input', function() {
            const address = this.value.trim();
            // If full address is being typed, clear individual fields
            if (address && zoneInput && netInput && nodeInput) {
                zoneInput.value = '';
                netInput.value = '';
                nodeInput.value = '';
            }
        });
    }
    
    // Clear full address when individual fields are used
    if (zoneInput || netInput || nodeInput) {
        // Handle zone select dropdown
        if (zoneInput) {
            zoneInput.addEventListener('change', function() {
                if (this.value && fullAddressInput) {
                    fullAddressInput.value = '';
                }
            });
        }
        
        // Handle net and node input fields
        [netInput, nodeInput].forEach(function(input) {
            if (input) {
                input.addEventListener('input', function() {
                    if (this.value.trim() && fullAddressInput) {
                        fullAddressInput.value = '';
                    }
                });
            }
        });
    }
    
    // Add form validation
    const form = document.querySelector('form');
    if (form) {
        form.addEventListener('submit', function(e) {
            const inputs = form.querySelectorAll('input');
            let hasValue = false;
            
            inputs.forEach(function(input) {
                if (input.value.trim()) {
                    hasValue = true;
                }
            });
            
            if (!hasValue) {
                e.preventDefault();
                alert('Please enter at least one search criteria');
            }
        });
    }
});
`
}